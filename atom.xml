<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Begin iOS]]></title>
  <link href="http://beginios.com/atom.xml" rel="self"/>
  <link href="http://beginios.com/"/>
  <updated>2014-06-09T02:12:06+00:00</updated>
  <id>http://beginios.com/</id>
  <author>
    <name><![CDATA[Bencalie]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Swift 入门]]></title>
    <link href="http://beginios.com/blog/2014/06/06/swift-guide/"/>
    <updated>2014-06-06T15:42:00+00:00</updated>
    <id>http://beginios.com/blog/2014/06/06/swift-guide</id>
    <content type="html"><![CDATA[<p>自从苹果公司在 2014 WWDC(Worldwide Developers Conference) 上公布了新的编程语言 Swift 以后，开发者们奔走相告，一时间 Swift 成了大家关注的焦点。本文记录我在了解 Swift 过程中的一些心得。</p>

<p>目前唯一权威的资料是苹果公司在 iBooks 上发布的电子书《<a href="https://itunes.apple.com/cn/book/swift-programming-language/id881256329?mt=11">The Swift Programming Language</a>》(EPub 格式)，下载地址：<a href="http://vdisk.weibo.com/s/efsQO6QAky">微盘</a>、<a href="http://pan.baidu.com/s/1eQ049Po">百度网盘</a>。</p>

<p>注：EPub 文件在 Windows 下可以用 <a href="http://www.adobe.com/products/digital-editions/download.html">Adobe Digital Editions 3.0</a> 查看。</p>

<h3>关于 Swift</h3>

<p>iOS 或者 Mac OS X 下的应用开发，一直都是使用的 Objective-C（以下简称 OC）。</p>

<p>对于很多有其他语言基础的开发者来说，刚接触到 OC 的语法都相当不适应，无论是函数声明，还是调用，都太颠覆传统的语法习惯了。（个人经验：当你习惯了，也不会觉得 OC 这语法有什么不妥，Xcode 的代码联想还是很给力的）</p>

<p>苹果公司花了多年的时间来打造 Swift，通过改善已有的编译器、调试器、框架来为 Swift 提供底层支持。</p>

<blockquote><p>Swift 是一门全新的编程语言，用于构建在 C 和 OC 语言之上的 iOS 和 OS X 程序开发，没有 C 的兼容性限制。</p><p>Swift 采用安全编程模式，并添加了很多现代化的特性，使得编程变得更容易、更灵活、更有趣。</p><p>Swift 身世清白（意即从零开始），由成熟和备受宠爱的 Cocoa 和 Cocoa Touch 框架的支持，是时候构想一下软件开发的全新模式了。</p><footer><strong>摘自《The Swift Programming Language》</strong></footer></blockquote>


<p>Swift 更加类似于传统的 C、C++ 之类的语法，更加简单高效，未来 Swift 必然是 iOS 或 Mac OSX 应用开发的首选。</p>

<p>Swift 支持 playground，可以和脚本语言一样，边写代码便查看运行结果，无需编译。</p>

<h3>开发环境</h3>

<p>Swift 的运行环境，搭建起来很容易，但有一些必备要求：</p>

<ul>
<li>Mac 电脑一台</li>
<li>10.9.3 以上的 Mac OS X 操作系统</li>
<li>Xcode 6.0 Beta 版本（目前好像只有付费的开发者能下载成功，下载地址：<a href="http://pan.baidu.com/s/1kTmNkGJ">百度网盘</a>）</li>
</ul>


<p>Xcode 6 安装完成，环境就算是 OK 了，启动界面如下：</p>

<p><img src="http://beginios.com/images/blog/xcode6.jpg"></p>

<p>点击 Get start with a playground 开始创建一个 playground，项目名称自己随便取吧，我这里写的是 MyPlayground</p>

<p>初始代码如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Playground - noun: a place where people can play
</span><span class='line'>
</span><span class='line'>import Cocoa
</span><span class='line'>
</span><span class='line'>var str = "Hello, playground"</span></code></pre></td></tr></table></div></figure>


<p>这里 import Cocoa 指定引入 Cocoa 框架，从这短短三行代码可以看出好多东西：</p>

<ul>
<li>语句无需分号（;）结束</li>
<li>没有 main 函数了</li>
<li>变量声明居然没指定强类型</li>
</ul>


<p>看起来比起一个基于 OC 创建的工程清爽了很多，不过我们还是先看看运行效果吧。</p>

<p>在代码末尾补上一行 <code>println(str)</code>，然后打开 Assistant Editor，在 Assistant Editor 里选择 TimeLine 下的 MyPlayground.playground (Timeline) ，就能一边编辑，一边实时看到程序运行的结果了，如图：</p>

<p><img src="http://beginios.com/images/blog/xcode-editor.jpg"></p>

<p>现在，让我们见识一下 Swift 吧。</p>

<h3>Swift 快速入门</h3>

<p>任何语言都是从 Hello world 开始的，Swift 里，一行就搞定了：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>println("Hello world")</span></code></pre></td></tr></table></div></figure>


<p>Swift 里，这一行代码就是一个完整的应用程序了，甚至范例代码里的 <code>import Cocoa</code>，也可以删掉。Swift 里在全局作用于中的代码就是程序入口，所以无需声明 main 方法。（这一点有点像 JavaScript 了，哈哈）</p>

<h3>变量和常量声明</h3>

<p><code>var</code> 用于声明变量，<code>let</code> 用于声明常量。和其他语言一样，常量只能赋值一次。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var myVariable = 42
</span><span class='line'>myVarible = 50
</span><span class='line'>let my Constant = 42</span></code></pre></td></tr></table></div></figure>


<p>可以看到，无需强制指定变量或者常量的类型。变量一旦赋值后，可以重新赋别的值，但类型必须和初始值相同，不能改变。如果你将 myVariable 赋值为 &ldquo;some string&#8221;，就会发现报错：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Playground execution failed: error: &lt;REPL>:10:12: error: cannot convert the expression's type '()' to type 'Int'
</span><span class='line'>myVariable = "some string"
</span><span class='line'>~~~~~~~~~~~^~~~~~~~~~~~~~~</span></code></pre></td></tr></table></div></figure>


<p>如果初始值不能提供变量的类型（或者没有初始值），可以在变量名后面制定类型，用冒号（:）分隔，如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let explicitDouble: Double = 70</span></code></pre></td></tr></table></div></figure>


<p>值永远不会隐式地转化为其他类型，如果需要转换值的类型，必须显示创建一个你想要的类型</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let label = "The width is "
</span><span class='line'>let width = 94
</span><span class='line'>let widthLabel = label + String(width)</span></code></pre></td></tr></table></div></figure>


<p>还有一种更简便的方法，在字符串里添加值：圆括号中写值，并且括号前加反斜线（\），例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let apples = 3
</span><span class='line'>let oranges = 5
</span><span class='line'>let appleSummary = "I have \(apples) apples."
</span><span class='line'>let fruitSummary = "I have \(apples + oranges) pieces of fruit."</span></code></pre></td></tr></table></div></figure>


<p>创建数组和字典也很简单，直接使用方括号（[]），使用下标或者键名来访问其中的元素。例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 创建一个数组，并修改下标 1 的元素
</span><span class='line'>var shoppingList = ["catfish", "water", "tulips", "blue paint"]
</span><span class='line'>shoppingList[1] = "bottle of water"
</span><span class='line'>
</span><span class='line'>// 创建一个字典，并增加一个键/值对
</span><span class='line'>var occupations = [
</span><span class='line'>  "Malcolm": "Captain",
</span><span class='line'>  "Kaylee": "Mechanic",
</span><span class='line'>]
</span><span class='line'>occupations["Jayne"] = "Public Relations"</span></code></pre></td></tr></table></div></figure>


<p>创建一个空数组，使用初始化语法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var emptyArray = String[]()
</span><span class='line'>var emptyDictionary = Dictionary&lt;String, Float>()
</span><span class='line'>
</span><span class='line'>emptyArray = []   // 不清楚数组元素类型，就直接方括号
</span><span class='line'>emptyDictionary = [:]     // 不清楚字典类型，直接使用 [:]</span></code></pre></td></tr></table></div></figure>


<h4>流程控制</h4>

<p>和其他语言一样，<code>if</code> 和 <code>switch</code> 是条件控制，<code>for-in</code>、<code>for</code>、<code>while</code>、<code>do-while</code> 是循环。条件或循环变量的圆括号可以省略，但是主体的花括号（{}）是必须的。</p>

<p>和其他语言相比，还是有一些细节需要注意：</p>

<p><code>if</code> 语句中，条件必须是一个布尔表达式，因为 Swift 不支持隐式类型转换。这就意味着 if score { &hellip; } 这样写是通常都是错误的，除非 score 是布尔类型，即使是整型（Int）也不行。</p>

<p>可以同时使用 <code>if</code> 和 <code>let</code> 来防止值的丢失。这些值是可选的，可选值通过包含另一个值或者包含 <code>nil</code> 来指明该值不存在。通过在类型后面添加问号来标记一个值为可选值。(很奇怪的感觉，这条件也不是布尔表达式啊？)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var optionalString: String? = "Hello"
</span><span class='line'>optionalString == nil
</span><span class='line'> 
</span><span class='line'>var optionalName: String? = "John Appleseed"
</span><span class='line'>var greeting = "Hello!"
</span><span class='line'>if let name = optionalName {
</span><span class='line'>    greeting = "Hello, \(name)"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>但这个 <code>let</code> 语句中，只允许可选值，不允许运算表达式存在，比如字符串连接的 +、逻辑非 ! 等等。</p>

<figure class='code'><figcaption><span>错误范例</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var str1: String? = "Hello"
</span><span class='line'>var str2: String? = "Swift"
</span><span class='line'>var str3: String? = str1 + str2
</span><span class='line'>var greeting:String
</span><span class='line'>if let name = str1 + str2 {   // 这样写是错误的，因为 str1 和 str2 本身虽然是可选值，但连接起来就不是可选值了
</span><span class='line'>  greeting = "Hello, \(name)"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>只有可选值为 <code>nil</code> 的时候，才进入 <code>else</code> 的逻辑。</p>

<p>switch 支持所有类型的数据，以及多种比较运算——没有限制必须是整数，也没有限制为必须测试相等。例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let vegetable = "red pepper"
</span><span class='line'>switch vegetable {
</span><span class='line'>  case "celery":
</span><span class='line'>      let vegetableComment = "Add some raisins and make ants on a log."
</span><span class='line'>  case "cucumber", "watercress":
</span><span class='line'>      let vegetableComment = "That would make a good tea sandwich."
</span><span class='line'>  case let x where x.hasSuffix("pepper"):
</span><span class='line'>      let vegetableComment = "Is it a spicy \(x)?"
</span><span class='line'>  default:
</span><span class='line'>      let vegetableComment = "Everything tastes good in soup."
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>执行完 case 后，程序自动跳出 switch，因此无需每个 case 后再写一行 break 来跳出 switch</p>

<p><code>for-in</code> 用来迭代字典中的元素，需要提供一对名字来访问每个键值对。例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let interestingNumbers = [
</span><span class='line'>  "Prime": [2, 3, 5, 7, 11, 13],
</span><span class='line'>  "Fibonacci": [1, 1, 2, 3, 5, 8],
</span><span class='line'>  "Square": [1, 4, 9, 16, 25],
</span><span class='line'>]
</span><span class='line'>var largest = 0
</span><span class='line'>for (kind, numbers) in interestingNumbers {
</span><span class='line'>  for number in numbers {
</span><span class='line'>      if number > largest {
</span><span class='line'>          largest = number
</span><span class='line'>      }
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>println(largest)</span></code></pre></td></tr></table></div></figure>


<p><code>while</code> 和 <code>do while</code>没什么特别的，通过条件来控制循环次数。例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var n = 2
</span><span class='line'>while n &lt; 100 {
</span><span class='line'>  n = n * 2
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>var m = 2
</span><span class='line'>do {
</span><span class='line'>  m = m * 2
</span><span class='line'>} while m &lt; 100</span></code></pre></td></tr></table></div></figure>


<p>循环条件中有两种方式：一是通过 <code>..</code> 或 <code>...</code> 来表示一段索引区域，另一种是显示地指定初始值、判断条件及每次循环的增量，例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var firstForLoop = 0
</span><span class='line'>for i in 0..3 {
</span><span class='line'>  firstForLoop += i
</span><span class='line'>}
</span><span class='line'>println(firstForLoop)
</span><span class='line'>
</span><span class='line'>var secondForLoop = 0
</span><span class='line'>for var i = 0; i &lt; 3; ++i {
</span><span class='line'>  secondForLoop += 1
</span><span class='line'>}
</span><span class='line'>println(secondForLoop)</span></code></pre></td></tr></table></div></figure>


<p>请注意：
* <code>..</code> 或 <code>...</code> 的取值范围只适用于正整数类型；
* 使用 <code>..</code> 的取值区间不包含最大值，使用 <code>...</code> 构造的范围则包含最大值。这二者的区别就相当于，前者判断条件里的 <code>&lt;</code>，后者是判断条件里的 <code>&lt;=</code></p>

<h4>函数和闭包</h4>

<p>Swift 里使用关键字 <code>func</code> 来声明一个函数。使用函数名及圆括号进行调用，参数放圆括号中，使用 &ndash;> 来分隔参数和函数的返回值类型。例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>func greet(name: String, day: String) -> String {
</span><span class='line'>  return "Hello \(name), today is \(day)."
</span><span class='line'>}
</span><span class='line'>greet("Bob", "Tuesday")
</span><span class='line'>
</span><span class='line'>// 返回值中使用圆括号来指定返回多个值的类型
</span><span class='line'>func getGasPrices() -> (Double, Double, Double) {
</span><span class='line'>return (3.59, 3.69, 3.79)
</span><span class='line'>}
</span><span class='line'>getGasPrices()</span></code></pre></td></tr></table></div></figure>


<p>函数的参数支持用 <code>...</code> 来表示可变长度的参数，通过数组来包含它们。例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>func sumOf(numbers: Int...) -> Int {
</span><span class='line'>  var sum = 0
</span><span class='line'>  for number in numbers {
</span><span class='line'>      sum += number
</span><span class='line'>  }
</span><span class='line'>  return sum
</span><span class='line'>}
</span><span class='line'>sumOf()
</span><span class='line'>sumOf(42, 597, 12)</span></code></pre></td></tr></table></div></figure>


<h3>参考资料</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自定义 Xcode 新文件模板]]></title>
    <link href="http://beginios.com/blog/2014/04/29/customize-xcode-template/"/>
    <updated>2014-04-29T09:42:00+00:00</updated>
    <id>http://beginios.com/blog/2014/04/29/customize-xcode-template</id>
    <content type="html"><![CDATA[<h3>模板存储位置</h3>

<p>/Applications/Xcode.app/Contents/Developer/Library/Xcode/Templates/</p>

<p>这里保存了所有 Xcode 模板，包含了工程、类、UI等等，其中 File Templates 是新文件的模板，Project Templates 是新工程的模板。</p>

<p>Cocos2d-x v2.2 开始就没有提供 Xcode 工程模板了，我们可以在这里补充。</p>

<p>一般来说，我们都是复制一个现有模板，进行修改。</p>

<h3>参考资料</h3>

<p><a href="http://www.bobmccune.com/2012/03/04/creating-custom-xcode-4-file-templates/">Create Custom Xcode 4 File Templates</a>
<a href="http://meandmark.com/blog/2011/12/creating-custom-xcode-4-project-templates/">Create Custom Xcode 4 Project Templates</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Weinre 调试移动网页]]></title>
    <link href="http://beginios.com/blog/2014/02/28/debug-with-weinre/"/>
    <updated>2014-02-28T14:22:00+00:00</updated>
    <id>http://beginios.com/blog/2014/02/28/debug-with-weinre</id>
    <content type="html"><![CDATA[<p>Weinre （<a href="http://people.apache.org/~pmuellr/weinre/docs/latest/">官方网页</a>
）全名是 <strong>WE</strong>b <strong>IN</strong>spector <strong>RE</strong>mote，它是一个网页调试工具，外观类似于 Firefox 下的 Firebug 和 Webkit 内核浏览器中的 Web Inspector，主要用于移动设备远程页面调试，典型应用就是在桌面浏览器里调试 iPhone、iPad、Android 手机等移动设备上网页中的 HTML/CSS/Javascript。</p>

<p>Weinre 是 Apache Cordova 项目（江湖上曾经鼎鼎大名的 PhoneGap）的一部分。很多网页调试工具都是基于它开发出来的，比如 jsFiddle、Adobe Shadow、MIHTool。</p>

<h2>Weinre工作原理</h2>

<p>Weinre 是通过代理的形式来工作的，简单来说，就是利用一台 HTTP 服务器充当中间代理的角色，这样你就可以在电脑上调试手机上的页面。</p>

<p>整个过程需要有三个角色的参与：</p>

<ul>
<li><strong>调试目标</strong>：需要调试的 HTML 页面，就是需要调试的手机或者平板电脑</li>
<li><strong>调试客户端</strong>：这是 Web Inspector 界面，开发者在 PC 端浏览器（比如 Chrome）中进行调试的主界面</li>
<li><strong>调试服务器</strong>：一台 HTTP 服务器，起到代理的作用，用来同步调试目标和调试客户端之间的命令</li>
</ul>


<p>废话不多说，直接进入实战环节。大致分为两个步骤：1、搭建调试服务器；2、调试。</p>

<h2>搭建调试服务器</h2>

<p>Weinre 的调试服务器是基于 Node.js 开发的，因此，在安装 Weinre 之前必须要先安装 Node.js 运行环境，网上资料很多，请大家自行查阅。</p>

<p>安装 Weinre 有两种方式，使用 npm 或者下载二进制文件进行安装，推荐前者。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo npm install weinre
</span><span class='line'>sudo npm install http://example.com/path/to/apache-cordova-weinre-X.Y.Z-bin.tar.gz</span></code></pre></td></tr></table></div></figure>


<p>够简单吧。</p>

<!--more-->


<h3>安装期间的错误处理</h3>

<p>执行 npm install weinre 的时候，遇到报错如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm http GET https://registry.npmjs.org/weinre
</span><span class='line'>npm http GET https://registry.npmjs.org/weinre
</span><span class='line'>npm http GET https://registry.npmjs.org/weinre
</span><span class='line'>npm ERR! Error: SELF_SIGNED_CERT_IN_CHAIN
</span><span class='line'>npm ERR!     at SecurePair.&lt;anonymous> (tls.js:1356:32)
</span><span class='line'>npm ERR!     at SecurePair.EventEmitter.emit (events.js:92:17)
</span><span class='line'>npm ERR!     at SecurePair.maybeInitFinished (tls.js:968:10)
</span><span class='line'>npm ERR!     at CleartextStream.read [as _read] (tls.js:462:15)
</span><span class='line'>npm ERR!     at CleartextStream.Readable.read (_stream_readable.js:320:10)
</span><span class='line'>npm ERR!     at EncryptedStream.write [as _write] (tls.js:366:25)
</span><span class='line'>npm ERR!     at doWrite (_stream_writable.js:221:10)
</span><span class='line'>npm ERR!     at writeOrBuffer (_stream_writable.js:211:5)
</span><span class='line'>npm ERR!     at EncryptedStream.Writable.write (_stream_writable.js:180:11)
</span><span class='line'>npm ERR!     at write (_stream_readable.js:583:24)
</span><span class='line'>npm ERR! If you need help, you may report this log at:
</span><span class='line'>npm ERR!     &lt;http://github.com/isaacs/npm/issues>
</span><span class='line'>npm ERR! or email it to:
</span><span class='line'>npm ERR!     &lt;npm-@googlegroups.com>
</span><span class='line'>
</span><span class='line'>npm ERR! System Linux 2.6.35.8-guest
</span><span class='line'>npm ERR! command "/root/local/node/bin/node" "/root/local/node/bin/npm" "install" "weinre"
</span><span class='line'>npm ERR! cwd /root
</span><span class='line'>npm ERR! node -v v0.10.20
</span><span class='line'>npm ERR! npm -v 1.3.11
</span><span class='line'>npm ERR! 
</span><span class='line'>npm ERR! Additional logging details can be found in:
</span><span class='line'>npm ERR!     /root/npm-debug.log
</span><span class='line'>npm ERR! not ok code 0</span></code></pre></td></tr></table></div></figure>


<p>查了一下原因，是因为安装默认走的 https 协议取安装包，执行如下代码来解决</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm config set registry="http://registry.npmjs.org/"</span></code></pre></td></tr></table></div></figure>


<p>再次执行 npm install weinre，顺利安装了：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm http GET http://registry.npmjs.org/weinre
</span><span class='line'>npm http 200 http://registry.npmjs.org/weinre
</span><span class='line'>npm http GET http://registry.npmjs.org/weinre/-/weinre-2.0.0-pre-HH0SN197.tgz
</span><span class='line'>npm http 200 http://registry.npmjs.org/weinre/-/weinre-2.0.0-pre-HH0SN197.tgz
</span><span class='line'>npm http GET http://registry.npmjs.org/express
</span><span class='line'>npm http GET http://registry.npmjs.org/coffee-script
</span><span class='line'>npm http GET http://registry.npmjs.org/nopt
</span><span class='line'>npm http GET http://registry.npmjs.org/underscore
</span><span class='line'>npm http 200 http://registry.npmjs.org/coffee-script
</span><span class='line'>npm http 200 http://registry.npmjs.org/underscore
</span><span class='line'>npm http 200 http://registry.npmjs.org/nopt
</span><span class='line'>npm http GET http://registry.npmjs.org/underscore/-/underscore-1.3.3.tgz
</span><span class='line'>npm http 200 http://registry.npmjs.org/underscore/-/underscore-1.3.3.tgz
</span><span class='line'>npm http 200 http://registry.npmjs.org/express
</span><span class='line'>npm http GET http://registry.npmjs.org/express/-/express-2.5.11.tgz
</span><span class='line'>npm http 200 http://registry.npmjs.org/express/-/express-2.5.11.tgz
</span><span class='line'>npm http GET http://registry.npmjs.org/connect
</span><span class='line'>npm http GET http://registry.npmjs.org/mime/1.2.4
</span><span class='line'>npm http GET http://registry.npmjs.org/mkdirp/0.3.0
</span><span class='line'>npm http 200 http://registry.npmjs.org/mkdirp/0.3.0
</span><span class='line'>npm http GET http://registry.npmjs.org/mkdirp/-/mkdirp-0.3.0.tgz
</span><span class='line'>npm http 200 http://registry.npmjs.org/mime/1.2.4
</span><span class='line'>npm http GET http://registry.npmjs.org/mime/-/mime-1.2.4.tgz
</span><span class='line'>npm http GET http://registry.npmjs.org/abbrev
</span><span class='line'>npm http GET http://registry.npmjs.org/qs
</span><span class='line'>npm http 200 http://registry.npmjs.org/mkdirp/-/mkdirp-0.3.0.tgz
</span><span class='line'>npm http 200 http://registry.npmjs.org/mime/-/mime-1.2.4.tgz
</span><span class='line'>npm http 200 http://registry.npmjs.org/abbrev
</span><span class='line'>npm http 200 http://registry.npmjs.org/qs
</span><span class='line'>npm http GET http://registry.npmjs.org/qs/-/qs-0.4.2.tgz
</span><span class='line'>npm http 200 http://registry.npmjs.org/connect
</span><span class='line'>npm http GET http://registry.npmjs.org/connect/-/connect-1.9.2.tgz
</span><span class='line'>npm http 200 http://registry.npmjs.org/qs/-/qs-0.4.2.tgz
</span><span class='line'>npm http 200 http://registry.npmjs.org/connect/-/connect-1.9.2.tgz
</span><span class='line'>npm http GET http://registry.npmjs.org/formidable
</span><span class='line'>npm http 200 http://registry.npmjs.org/formidable
</span><span class='line'>weinre@2.0.0-pre-HH0SN197 node_modules/weinre
</span><span class='line'>├── underscore@1.3.3
</span><span class='line'>├── coffee-script@1.3.3
</span><span class='line'>├── nopt@1.0.10 (abbrev@1.0.4)
</span><span class='line'>└── express@2.5.11 (qs@0.4.2, mime@1.2.4, mkdirp@0.3.0, connect@1.9.</span></code></pre></td></tr></table></div></figure>


<p>好了，输入命令 weinre &ndash;? 看一看，是不是正常了？奇怪，控制台报错——weinre: command not found，刚才明明安装成功了，噢，对，忘记设置环境变量了，执行如下 SHELL 命令修正</p>

<figure class='code'><figcaption><span>请根据你实际的 node.js 和 weinre 安装路径调整 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">export</span> <span class="nx">PATH</span><span class="o">=</span><span class="err">/root/local/node/bin:$PATH</span>
</span><span class='line'><span class="kr">export</span> <span class="nx">PATH</span><span class="o">=</span><span class="err">/root/node_modules/weinre:$PATH</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果不想每次都输入这命令，修改 .bashrc，加入到文件末尾。</p>

<p>再次运行命令 weinre &ndash;? 试试，输出结果如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>usage:   weinre [options]
</span><span class='line'>version: 2.0.0-pre-HH0SN197
</span><span class='line'>
</span><span class='line'>options:
</span><span class='line'>    --httpPort     port to run the http server on        default: 8080
</span><span class='line'>    --boundHost    ip address to bind the server to      default: localhost
</span><span class='line'>    --verbose      print more diagnostics                default: false
</span><span class='line'>    --debug        print even more diagnostics           default: false
</span><span class='line'>    --readTimeout  seconds to wait for a client message  default: 5
</span><span class='line'>    --deathTimeout seconds to wait to kill client        default: 3*readTimeout
</span><span class='line'>
</span><span class='line'>--boundHost can be an ip address, hostname, or -all-, where -all-
</span><span class='line'>means binding to all ip address on the current machine'
</span><span class='line'>
</span><span class='line'>for more info see: http://people.apache.org/~pmuellr/weinre/</span></code></pre></td></tr></table></div></figure>


<p>Bingo，安装完成，下面我们就来体验一下吧。</p>

<h2>使用 Weinre</h2>

<p>安装好以后就可以启动 Weinre 了，根据上面 weinre &ndash;? 命令的输出，我们可以看到 Weinre 提供了 6 个可选的启动参数，常用的是面两个参数：</p>

<ul>
<li>&mdash;httpPort 调试服务器运行的端口，默认的 8080，如果这个端口有在用，可以改为其它端口；</li>
<li>&mdash;boundHost 调试服务器绑定的 IP 地址，也可以是域名，默认是 localhost，还可以设置为 -all-，表示绑定到所有当前机器可以访问的接口。如下所示：</li>
</ul>


<p>weinre &mdash;boundHost -all-</p>

<p>这些配置也可以在 Weinre 根目录下创建 server.properties 文件配置，内容如下所示：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>boundHost:    -all-
</span><span class='line'>httpPort:     8081
</span><span class='line'>reuseAddr:    true
</span><span class='line'>readTimeout:  1
</span><span class='line'>deathTimeout: 5</span></code></pre></td></tr></table></div></figure>


<p>需要注意的是，命令行设置的参数的优先级更高，会覆盖文件配置的参数。</p>

<h3>启动 Weinre HTTP 服务器</h3>

<p>我将 Weinre 安装在厂内的服务器 10.210.215.116 上面的，因此输入命令 weinre &mdash;boundHost 10.210.215.116，执行命令后，打开 Chrome 通过 <a href="http://10.210.215.116:8080">http://10.210.215.116:8080</a> 就可以访问 Weinre 服务器主页，如图：</p>

<p><img src="http://beginios.com/images/blog/weinre-home.png"></p>

<p>注：如果不想自己搭建，可以用 <a href="http://debug.phonegap.com">http://debug.phonegap.com</a></p>

<h3>引入 JS 脚本</h3>

<p>要开始调试，光搭建了 Weinre 服务器还不够，还需要在被调试的页面引用一个 JS 文件，文件引用方式有两种：</p>

<ul>
<li>页面直接通过 &lt;script&gt;&lt;/script&gt; 引入，如：</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://10.210.215.116:8080/target/target-script-min.js#anonymous&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>动态书签（Bookmarklet）形式载入，如：</li>
</ul>


<figure class='code'><figcaption><span>如下代码添加到收藏夹，以便随时执行 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">javascript</span><span class="o">:</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span><span class="nx">e</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s2">&quot;src&quot;</span><span class="p">,</span><span class="s2">&quot;http://184.82.221.68:8080/target/target-script-min.js#anonymous&quot;</span><span class="p">);</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s2">&quot;body&quot;</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">e</span><span class="p">);})(</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;script&quot;</span><span class="p">));</span><span class="k">void</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>调试主界面</h3>

<p>debug client user interface 是调试客户端的主界面，如图：</p>

<p><img src="http://beginios.com/images/blog/weinre-interface.png"></p>

<h3>手机端调试</h3>

<p>手机端打开加载了 target-script-min.js 的页面，这时可以看到调试主界面有链接可点击了。里面的操作几乎和 Chrome 的开发人员工具一样。如图：</p>

<p><img src="http://beginios.com/images/blog/weinre-web-inspector.png"></p>

<p>不过发觉有一些有问题的地方：我用猎豹浏览器，JS 动态写入的 DOM 节点无法查看，Chrome 是可以的。</p>

<p>我这里 Network 一直没有数据，或者只抓到一些 Weinre 通讯数据，不知道为什么。Timeline 就死活没数据， Chrome 也不行。</p>

<p>debug.phonegap.com 的使用方法一样，不过就是很慢。</p>

<p><img src="http://beginios.com/images/blog/weinre-debug-phonegap-com.png"></p>

<h2>参考资料</h2>

<ul>
<li><a href="http://people.apache.org/~pmuellr/weinre/docs/latest/">官方文档</a></li>
<li><a href="http://www.youtube.com/watch?v=MxmFrFEGInU">官方视频</a></li>
<li>git仓库：</li>
</ul>


<p><a href="https://github.com/apache/cordova-weinre">https://github.com/apache/cordova-weinre</a></p>

<p><a href="https://git-wip-us.apache.org/repos/asf?p=cordova-weinre.git;a=summary">https://git-wip-us.apache.org/repos/asf?p=cordova-weinre.git;a=summary</a></p>

<ul>
<li>npm 插件首页：<a href="https://www.npmjs.org/package/weinre">https://www.npmjs.org/package/weinre</a></li>
<li><a href="http://www.cnblogs.com/lhb25/p/debug-mobile-site-and-app-with-weinre.html">http://www.cnblogs.com/lhb25/p/debug-mobile-site-and-app-with-weinre.html</a></li>
<li><a href="http://blog.csdn.net/dojotoolkit/article/details/6280924">http://blog.csdn.net/dojotoolkit/article/details/6280924</a></li>
<li><a href="http://muellerware.org/papers/weinre/manual.html">http://muellerware.org/papers/weinre/manual.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[移动页面前端调试 - iOS 系统]]></title>
    <link href="http://beginios.com/blog/2014/02/27/ios-mobile-page-debug/"/>
    <updated>2014-02-27T15:52:00+00:00</updated>
    <id>http://beginios.com/blog/2014/02/27/ios-mobile-page-debug</id>
    <content type="html"><![CDATA[<p>随着移动智能设备的普及，前端开发的工作战线，越来越多偏向移动方向，因此，移动设备上的调试能力是必不可少的。</p>

<p>主流的移动设备，还是 Android 和 iOS，因此，我将分两篇文章，分别介绍 iOS 和 Android 下的前端调试技术。</p>

<p>iOS 设备下进行 HTML 页面的调试，根据页面的调用方式不同，分为两种情况：</p>

<ul>
<li><p>直接在浏览器中显示 HTML 页面。无论系统自带的 Safari，还是其他厂商的浏览器（如 Chrome、猎豹、搜狗、海豚、Mercury、QQ 等等），均在此列。</p></li>
<li><p>原生应用中集成的 UIWebview 中显示 HTML 页面。Cordova（原名 PhoneGap） 的内置 Webview 也算在此列。</p></li>
</ul>


<h2>测试环境访问</h2>

<p>iOS 下不越狱是没法设置 HOST 的。</p>

<p>如果你的代码还在测试环境，目前只能通过 Wifi 代理，在充当代理的机器上设置 HOST 来解决。</p>

<p>如果越狱了就好办了， iFile 找到 /etc/hosts 修改。网上资料很多，大家自己发掘吧</p>

<p>下面，我们就逐一介绍如何进行调试。</p>

<h2>Safari</h2>

<p>Mac 下的 Safari 是自带了开发人员工具的，可以进行页面调试，但是 iPhone/iPad 下由于手持设备屏幕大小和触摸式操作习惯的影响，iOS 系统的 Safari 没有带调试功能。</p>

<p>如果你的设备是 iOS 6 以上，且有一台 Mac 电脑，你就可以利用 Mac 电脑上的 Safari ，远程进行调试。</p>

<p><strong>注：Windows 下的 Safari 不支持这个功能。</strong></p>

<p>分如下几个步骤完成：</p>

<p>1、iOS 设备开启远程调试。进入设置 &ndash;> Safari &ndash;> 高级，将 Web 检查器一项开启。</p>

<!--more-->


<p><img src="http://beginios.com/images/blog/mobiledebug/ios-safari-setting.png"></p>

<p>2、将设备用数据线连接到 Mac 电脑上。</p>

<p>3、打开 Mac 电脑上的 Safari，打开偏好设置，在高级选项卡，勾选<strong>在菜单中显示“开发”菜单</strong>，开启开发模式。</p>

<p><img src="http://beginios.com/images/blog/mobiledebug/mac-safari-setting.png"></p>

<p>4、手机上 Safari 打开你需要调试的页面，然后再 Mac 电脑的 Safari 开发菜单下找到你的设备名，子菜单下有设备已经开启的网页。选择你需要调试的页面。</p>

<p><img src="http://beginios.com/images/blog/mobiledebug/mac-safari-find.png"></p>

<p>5、其实已经结束了，你将看到如图的 Web Inspector 界面，鼠标在这里操作，设备上也相应发生变化
。</p>

<p><img src="http://beginios.com/images/blog/mobiledebug/mac-safari-web-inspector.png"></p>

<p><img src="http://beginios.com/images/blog/mobiledebug/ios-safari-debug.png"></p>

<p>你可以像平时那样，调试 JavaScript，修改 HTML/CSS，查看本地的 cookie、本地存储、应用缓存等。</p>

<p>检查器上还有个手型的图标，激活它以后，设备 Safari 上选择点击一个元素，检查器上就能相应反馈出来。</p>

<p><img src="http://beginios.com/images/blog/mobiledebug/mac-safari-web-inspector-hand.png"></p>

<p><strong>iOS 6 以前的系统，就只能使用 Weinre 了。</strong></p>

<h2>Weinre</h2>

<p>如何使用，请阅读<a href="http://beginios.com/blog/2014/02/28/debug-with-weinre/">使用 Weinre 调试移动网页</a></p>

<h2>Adobe Edge（原名 Adobe Shadow）</h2>

<p>Adobe Edge 是基于 Weinre 开发的工具，它能轻松的在多台设备（支持IOS、Android）上同步浏览网页，还能任选其一来调试。由于在移动设备上有 App 的支持，省去了手工插入 target script 这一步，非常方便。美中不足是它的 client 页访问的 Adobe 远程服务器，延时比较大。</p>

<p><a href="http://html.adobe.com/edge/inspect/">http://html.adobe.com/edge/inspect/</a></p>

<h2>MIHTool（<a href="http://www.iunbug.com/mihtool">官网</a>）</h2>

<p>MIHTool 是国内开发者<a href="http://weibo.com/unbug">@听奏</a> 开发的一款 iOS 调试工具。</p>

<p>iPhone 版需要远程打开 Web Inspector，而 iPad 版是内置在界面中的。界面可以去官网<a href="http://www.iunbug.com/mihtool-zh">查看</a>。</p>

<p>iPad 版跟 Mac 下的 Safari 调试类似，不多做介绍。这里仅仅介绍一下 iPhone 版的。</p>

<p>1、打开应用，输入你要调试的页面</p>

<p><img src="http://beginios.com/images/blog/mobiledebug/mihtool-open-url.jpg"></p>

<p>2、然后点击下面工具条的 i 图标，就能看到一个页面：<a href="http://localhost:1630/about">http://localhost:1630/about</a></p>

<p><img src="http://beginios.com/images/blog/mobiledebug/mihtool-about.jpg"></p>

<p>这里可以看到 MIHTool 已经在设备上起了一个 HTTP 服务，直接打开这个地址：<a href="http://10.209.19.138:1630/">http://10.209.19.138:1630/</a> ，是一个使用指南，告诉你如何使用这个工具。</p>

<p><img src="http://beginios.com/images/blog/mobiledebug/mihtool-local-ip.png"></p>

<ul>
<li>可以唤起设备上的应用来调试，包含 MIHTool、Safari、Chrome</li>
<li>调用 Web Inspector 的方法（设备 IP，或者开发者提供的在线服务器）</li>
<li>查看历史记录、重载当前页面、清理缓存/cookie 等</li>
</ul>


<p>大家重点关注 Web Inspector 部分，新标签中打开其中一个 URL，如图：</p>

<p><img src="http://beginios.com/images/blog/mobiledebug/mihtool-romote-ip.png"></p>

<p>点击 Targets 中的 URL，然后切换到 Elements 选项卡，我们现在看到的界面，跟 Chrome 的开发者工具一样。在这里尽情调试吧。</p>

<p>来，我们修改一下页面的背景色，看看会发生什么？</p>

<p><img src="http://beginios.com/images/blog/mobiledebug/mihtool-modify-color.png"></p>

<p><img src="http://beginios.com/images/blog/mobiledebug/mihtool-about-modified.jpg"></p>

<p>细心的人估计已经看出来了，本质上，MIHTool 就是 Weinre。</p>

<!--
## Chrome

## 应用中的 UIWebView
-->


<p>iOS 下进行抓包，还可以安装 HTTPWatch，基础版是免费的，专业版需要 ￥648.00，还是比较贵的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android 下开发 HTML5 遇到的坑]]></title>
    <link href="http://beginios.com/blog/2014/02/26/android-html5-development-trap/"/>
    <updated>2014-02-26T15:50:00+00:00</updated>
    <id>http://beginios.com/blog/2014/02/26/android-html5-development-trap</id>
    <content type="html"><![CDATA[<p>这两天在开发一个 HTML5 的应用，主要是用于 Android 下的 WebView 内嵌使用。开发阶段，在 PC 的 Chrome 上测试，一切正常。但是和应用真机联调的时候，遇到了一系列问题，耗时颇久，总算一一解决，总结如下</p>

<h2>设置HOST</h2>

<p>因为是在测试环境，第一步就是要设置 HOST，确保域名指向相应的 IP。</p>

<p>一般来说，有两种办法：</p>

<ul>
<li><p>在手机浏览器中测试，是给 Wifi 设置 HTTP 代理，指向开着 Fiddler 或者 Charles 的 PC 机的 IP（端口号 8888），在 PC 机上设置 HOST，达到测试的目的。对于没有 ROOT 权限的 Android 机器，这几乎就足够了。</p></li>
<li><p>在开发机中设置 HOST。不过这要求有 ROOT 权限才能编辑。</p></li>
</ul>


<p>设置 HOST 的时候，我习惯性修改的是 /etc/hosts，结果无论如何都不生效。后来查询资料，才知道，应该修改 /system/etc/hosts。并且请注意 HOST 文件最后一定要有一行空行。</p>

<p>如果是在 Windows 下修改并同步过去的，还要注意换行符的问题。</p>

<!--more-->


<h2>清缓存</h2>

<p>应用的 WebView 自身也有缓存，有同事在改了文件后，一直发现无变化。后来进入设置->应用程序->管理应用程序，找到我们的 APP，清掉全部数据后才生效。</p>

<h2>SQLite 数据库</h2>

<p>应用中使用了 SQLite 缓存部分数据，Android 2.* + 上 通过 try catch 捕获到 SQLite 报错：Cannot call method &lsquo;transaction&rsquo; of null。</p>

<p>最初的解决方案是，不仅要检查是否有 openDatabase 还要检查实例化结果是否有 transaction 方法，如果没有就走 sessionStorage 来存储。</p>

<p>根本原因，是因为数据库路径的问题导致，当没有指定数据库文件路径而使用 Web SQL 数据库时，错误信息显示不能打开sqlite数据库文件。</p>

<p>解决方法：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">webView</span><span class="o">.</span><span class="na">setWebChromeClient</span><span class="o">(</span><span class="k">new</span> <span class="n">WebChromeClient</span><span class="o">(){</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onExceededDatabaseQuota</span><span class="o">(</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">url</span><span class="o">,</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">databaseIdentifier</span><span class="o">,</span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">currentQuota</span><span class="o">,</span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">estimatedSize</span><span class="o">,</span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">totalUsedQuota</span><span class="o">,</span>
</span><span class='line'>        <span class="n">QuotaUpdater</span> <span class="n">quotaUpdater</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">quotaUpdater</span><span class="o">.</span><span class="na">updateQuota</span><span class="o">(</span><span class="mi">5</span> <span class="o">*</span> <span class="mi">1024</span> <span class="o">*</span> <span class="mi">1024</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>    <span class="n">webSettings</span><span class="o">.</span><span class="na">setDatabaseEnabled</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">databasePath</span> <span class="o">=</span> <span class="n">getApplicationContext</span><span class="o">().</span><span class="na">getDir</span><span class="o">(</span><span class="s">&quot;database&quot;</span><span class="o">,</span> <span class="n">Context</span><span class="o">.</span><span class="na">MODE_PRIVATE</span><span class="o">).</span><span class="na">getPath</span><span class="o">();</span>
</span><span class='line'>    <span class="n">webSettings</span><span class="o">.</span><span class="na">setDatabasePath</span><span class="o">(</span><span class="n">databasePath</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>参考：<a href="http://www.html5online.com.cn/articles/2013012101.html">在WebView中设定使用Web Storage与Web SQL数据库</a></p>

<h2>history.pushState</h2>

<p>pushState 执行完，取 URL 还是之前的。只能切换场景的时候，将新场景的 URL 通过传参的形式传递。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UIWebview 顺时针旋转 90 度]]></title>
    <link href="http://beginios.com/blog/2014/02/25/uiwebview-rotate/"/>
    <updated>2014-02-25T15:50:00+00:00</updated>
    <id>http://beginios.com/blog/2014/02/25/uiwebview-rotate</id>
    <content type="html"><![CDATA[<p>微博的 iPhone 客户端是竖屏浏览的，前两天 9173 推出了一个 Flappy Bird 微博版，是一个横屏的 HTML 游戏。因此在内嵌浏览器中依然是竖着浏览的，下面出现了一大块黑色背景，9173 不得已下面放了一个图标，示意玩家旋转屏幕为横屏来玩。如图：</p>

<p><img src="images/blog/flappy-bird.jpg"></p>

<!--more-->


<p>这给人的感觉很不好，于是开始琢磨怎么改进。有两个思路：</p>

<ul>
<li>页面自身内容旋转 90 度</li>
<li>Webview 本身旋转 90 度</li>
</ul>


<p>一开始的思路是页面内将 canvas 画布通过 CSS3 的 transform 来实现：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;canvas style="transform:rotate(90deg);">&lt;/canvas></span></code></pre></td></tr></table></div></figure>


<p>经测试，虽然表面旋转过来了，JS 里的坐标系还是以 BODY 的为准，这个想法放弃。</p>

<p>那只有尝试第二种了，直接旋转 Webview，这里只尝试了 iOS 系统，Android 未测试</p>

<p>其实一行代码就搞定了（这里 webView 是 UIWebview 的引用）：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">webView</span><span class="p">.</span><span class="n">transform</span> <span class="o">=</span> <span class="n">CGAffineTransformMakeRotation</span><span class="p">(</span><span class="n">M_PI</span><span class="o">/</span><span class="mi">2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>圆周率 PI 表示 180度，在 Objective-C 里用 M_PI 表示，旋转 90 度，就是除以 2。</p>

<p>下面的代码，可以基于原有的旋转角度进一步旋转：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">CGAffineTransform</span> <span class="n">transform</span> <span class="o">=</span> <span class="n">webView</span><span class="p">.</span><span class="n">transform</span><span class="p">;</span>
</span><span class='line'><span class="n">webView</span><span class="p">.</span><span class="n">transform</span> <span class="o">=</span> <span class="n">CGAffineTransformRotate</span><span class="p">(</span><span class="n">transform</span><span class="p">,</span> <span class="n">M_PI</span><span class="o">/</span><span class="mi">2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>微博客户端里，可以进行判断，如果需要横屏展示的应用（开发者在后台设置），就自动旋转 UIWebview，同时将 navigationBar 和底部导航都旋转以适应。全屏游戏甚至不需要展示 navigationBar 和底部导航。</p>

<p>需要注意的是，UIWebview 里最好就不要用 window 对象下 alert、confirm 等，因为他们还是竖屏显示的。可以自己用 HTML/CSS 制作这样的 UI。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[流行的 Markdown 编辑器]]></title>
    <link href="http://beginios.com/blog/2014/02/24/markdown-editor/"/>
    <updated>2014-02-24T15:50:00+00:00</updated>
    <id>http://beginios.com/blog/2014/02/24/markdown-editor</id>
    <content type="html"><![CDATA[<p><a href="http://ux.etao.com/posts/620">Markdown 简介</a></p>

<h3>MarkdownPad</h3>

<p>仅支持 Windows 系统，需要安装 Microsoft .NET Framework 4.0</p>

<p>免费版有一定限制，Pro 版本 $14.95</p>

<p>官方网站：<a href="http://markdownpad.com/">http://markdownpad.com/</a></p>

<!--more-->


<p><img src="http://markdownpad.com/img/markdownpad2.png"></p>

<h3>GoLangIDE</h3>

<p>Go 语言写的 Markdown 编辑器，支持 Windows、Linux、Mac</p>

<p><a href="http://code.google.com/p/golangide/">http://code.google.com/p/golangide/</a></p>

<p><img src="images/blog/markdown-editor-liteide.png"></p>

<h3>Mou</h3>

<p>官方网站：<a href="http://mouapp.com/">http://mouapp.com/</a></p>

<p><img src="http://mouapp.com/images/Mou_Screenshot_1.png"></p>

<h3>Markdown Pro</h3>

<p>带预览功能，支持 Mac OS X 10.7+</p>

<p>官方网站：<a href="http://markdownpro.com/">http://markdownpro.com/</a></p>

<p><img src="http://markdownpro.com/assets/main_window-6e78258db30c284deb8e2c5663cf1e25.jpg"></p>

<h3>TEXTS</h3>

<p>支持 Windows 和 Mac OS X</p>

<p>官方网站：<a href="http://www.texts.io/">http://www.texts.io/</a></p>

<p><img src="http://www.texts.io/img/screenshot.png"></p>

<h3>ByWord</h3>

<p>官方网站：<a href="http://bywordapp.com/">http://bywordapp.com/</a></p>

<h3>MarkPad</h3>

<p>带预览功能，支持 Windows</p>

<p>官方网站：<a href="http://code52.org/DownmarkerWPF/">http://code52.org/DownmarkerWPF/</a></p>

<p><img src="http://code52.org/DownmarkerWPF/screenshot.png"></p>

<h3>ReText</h3>

<p>官方网站：<a href="http://sourceforge.net/p/retext/home/ReText/">http://sourceforge.net/p/retext/home/ReText/</a></p>

<h3>Sublime Text 2</h3>

<p>使用插件实现，如：Markdown Preview，MarkdownEditing</p>

<p>官方网站：<a href="http://www.sublimetext.com/dev">http://www.sublimetext.com/dev</a></p>

<h3>Dillinger</h3>

<p>官方网站：<a href="http://dillinger.io/%EF%BC%88%E7%BD%91%E9%A1%B5%E7%89%88%EF%BC%89">http://dillinger.io/%EF%BC%88%E7%BD%91%E9%A1%B5%E7%89%88%EF%BC%89</a></p>

<h3>Made（Chrome插件）</h3>

<p>官方网站：<a href="https://chrome.google.com/webstore/detail/oknendfeeopgpibecfjljjfanledpbkog?hl=en">https://chrome.google.com/webstore/detail/oknendfeeopgpibecfjljjfanledpbkog?hl=en</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Google搜索结果中显示作者信息/头像]]></title>
    <link href="http://beginios.com/blog/2014/02/20/google-search-result-show-author/"/>
    <updated>2014-02-20T10:50:00+00:00</updated>
    <id>http://beginios.com/blog/2014/02/20/google-search-result-show-author</id>
    <content type="html"><![CDATA[<p>众多搜索引擎中，我比较中意谷歌，因为它搜索结果中有效信息比例很高。谷歌的搜索结果页中，经常看得到一些搜索结果带有作者信息和头像，众多搜索结果中，总能让人眼前一亮。</p>

<p><img src="http://beginios.com/images/blog/google-search-result.png"></p>

<h3>实现方法</h3>

<h4>1、注册<a href="https://plus.google.com/">Google+</a></h4>

<h4>2、修改一下google+网站的撰稿者部分,添加你的博客或个人网站链接。</h4>

<p>设置位置： google+ > 个人资料 > 简介 > 链接, 可以<a href="https://plus.google.com/me/about/edit/co">戳这里直接打开修改位置</a></p>

<!--more-->


<p><img src="http://beginios.com/images/blog/google-plus-modify.png"></p>

<p>点击修改</p>

<p><img src="http://beginios.com/images/blog/google-plus-custom.png"></p>

<p>点击保存确认修改。</p>

<p>在链接面板里还有个“Google+网址”，点击使用此网址，可以查看自己在 Google+ 公开个人资料的网址，复制出来，下面要用到。</p>

<p><img src="http://beginios.com/images/blog/google-plus-author.png"></p>

<h4>3、在您的网页上创建指向您 Google+ 个人资料的链接。</h4>

<p>两种方法, 自选一个：</p>

<p>方法一：在页面(body部分）直接添加一个链接到你的 Google+ 页面，例如:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;https://plus.google.com/107446839256480078362/posts?rel=author&quot;</span><span class="nt">&gt;</span>我的Google+<span class="nt">&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意网址的协议是是 <a href="https://">https://</a> ，并且必须有 ?rel=author 参数。</p>

<p>方法二: 在网站页面头部（head部分）容器中添加一行，例如:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;author&quot;</span> <span class="na">href=</span><span class="s">&quot;https://plus.google.com/107446839256480078362/posts&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意网址的协议是是 <a href="https://">https://</a> ，并且后面带有一个 /posts。</p>

<p>本站选择的是后者。</p>

<p>至此，已经大功告成了。 最后请确保设置中的<a href="https://plus.google.com/settings">个人资料搜索选项</a>: 帮助其他人在搜索结果中找到我的个人资料处于选中状态，否则是不会显示个人信息的。</p>

<p><img src="http://beginios.com/images/blog/google-plus-setting.png"></p>

<p>你可以用 Google 的网站站长工具测试一下是否设置正确：<a href="http://www.google.com/webmasters/tools/richsnippets">http://www.google.com/webmasters/tools/richsnippets</a></p>

<p>输入你的网址点预览，效果应该如图：</p>

<p><img src="http://beginios.com/images/blog/google-plus-test.png"></p>

<p>一般设置成功后，需要几天后才能看得到，请大家有点耐心，表着急。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 开发工具集合]]></title>
    <link href="http://beginios.com/blog/2014/02/17/ios-development-tools/"/>
    <updated>2014-02-17T06:50:00+00:00</updated>
    <id>http://beginios.com/blog/2014/02/17/ios-development-tools</id>
    <content type="html"><![CDATA[<h3>IDE</h3>

<h4>Xcode</h4>

<p>苹果自家的集成开发工具，不必多说。</p>

<p>官方首页：<a href="https://developer.apple.com/xcode/">https://developer.apple.com/xcode/</a></p>

<p>免费使用，仅能运行在 Mac 下。</p>

<p><img src="https://devimages.apple.com.edgekey.net/xcode/images/xcode5-hero.jpg"></p>

<h4>JetBrains: App Code</h4>

<p>JetBrains 有许多业内著名的开发工具：WebStorm、PHPStrom</p>

<p>官方首页：<a href="http://www.jetbrains.com/objc/">http://www.jetbrains.com/objc/</a></p>

<p>商业软件，个人授权 $99，商业授权 $199。它只能运行在 Mac 上。</p>

<p>相对于 Xcode 来说，工程管理弱一些。使用的不多，难以置喙。</p>

<p><img src="http://www.jetbrains.com/objc/img/tour/Debugger.png"></p>

<!--more-->


<h3>SQLite 管理</h3>

<h4>SQLiteManager</h4>

<p>官方首页：<a href="http://www.sqlabs.net/sqlitemanager.php">http://www.sqlabs.net/sqlitemanager.php</a></p>

<p>商业软件（$49.00），支持 Windows 和 Mac 系统。</p>

<p>本地 SQLite 数据库管理，可以进行增删改查。比 Firefox 的 SQLite Manager 插件更加强大</p>

<p>下载：<a href="http://pan.baidu.com/s/1gdqoSSV">百度网盘</a></p>

<p><img src="http://www.sqlabs.net/images/sqlitemanager4/main@2x.jpg"></p>

<h3>SQLiteExpert</h3>

<p>官方首页：<a href="http://www.sqliteexpert.com/index.html">http://www.sqliteexpert.com/index.html</a></p>

<p>分为个人版（免费）和专业版（$59.00），二者功能略有差异</p>

<p><img src="http://www.sqliteexpert.com/screenshots/execute_sql_large.png"></p>

<h3>Navicat for SQLite</h3>

<p>官方首页：<a href="http://www.navicat.com.cn/">http://www.navicat.com.cn/</a></p>

<p>商业软件，支持 Windows、Mac 和 Linux</p>

<p><img src="http://www.navicat.com.cn/images/stories/products/sqlite/mac/img_productSQLite_02_Grid_Form_View_Mac_large.png"></p>

<h3>MesaSQLite</h3>

<p>官方首页：<a href="http://www.desertsandsoftware.com/?page_id=17">http://www.desertsandsoftware.com/?page_id=17</a></p>

<p>免费软件，仅支持 Mac 系统</p>

<p><img src="http://www.desertsandsoftware.com/wp-content/plugins/doptg/uploads/yQe4s44W86DHa85YSpjeg44Y31EX5DTeTkhqNmrPtdPGMr6gp5wpeecYaSyOypzjR.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS UIWebview 中直接唤起电话拨号]]></title>
    <link href="http://beginios.com/blog/2014/02/14/ios-uiwebview-support-telephone-call/"/>
    <updated>2014-02-14T06:39:00+00:00</updated>
    <id>http://beginios.com/blog/2014/02/14/ios-uiwebview-support-telephone-call</id>
    <content type="html"><![CDATA[<p>在 iPhone 自带的 Safari 浏览器中，是可以通过苹果公司定义的 <a href="https://developer.apple.com/library/ios/featuredarticles/iPhoneURLScheme_Reference/Introduction/Introduction.html">Apple URL Schemas</a> 直接呼出电话拨号的，效果如图：</p>

<p><img src="http://beginios.com/images/blog/tel-url-schema.png"></p>

<figure class='code'><figcaption><span>HTML中的写法 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;tel:10010&quot;</span><span class="nt">&gt;</span>联通客户服务热线10010<span class="nt">&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p>如果想禁用此功能，在页面的 &lt;head&gt;&lt;/head&gt; 之间添加如下代码：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;format-detection&quot;</span> <span class="na">content=</span><span class="s">&quot;telephone=no&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>但在一个原生的 iOS 应用中，直接添加一个 UIWebview，嵌入相同的页面后，点击链接却没有出现这个确认提示。新浪微博官方客户端里也无效。长按这个链接，能看到呼叫、保存到通讯录的菜单，证明内置浏览器还是能识别这个 url schema。</p>

<p>微信和百度的内置浏览器中，点击同样的链接，会直接唤起，如图：</p>

<p><img src="http://beginios.com/images/blog/weixin-tel-schema.jpg"></p>

<p>经过研究，发现不同之处，微信等是原生应用中唤起的。</p>

<p>需要在 UIViewController 的头文件中中设置支持 UIWebviewDelegate，并在实现代理方法 &ndash; (BOOL)webView:(UIWebView <em>)webView shouldStartLoadWithRequest:(NSURLRequest </em>)request navigationType:(UIWebViewNavigationType)navigationType，一旦发现是 tel:// 这种格式，就在由 Objective-C 唤起拨号。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">webView:</span><span class="p">(</span><span class="n">UIWebView</span> <span class="o">*</span><span class="p">)</span><span class="nv">webView</span> <span class="nf">shouldStartLoadWithRequest:</span><span class="p">(</span><span class="n">NSURLRequest</span> <span class="o">*</span><span class="p">)</span><span class="nv">request</span> <span class="nf">navigationType:</span><span class="p">(</span><span class="n">UIWebViewNavigationType</span><span class="p">)</span><span class="nv">navigationType</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">NSURL</span> <span class="o">*</span><span class="n">url</span> <span class="o">=</span> <span class="p">[</span><span class="n">request</span> <span class="n">URL</span><span class="p">];</span>
</span><span class='line'>  <span class="k">if</span><span class="p">([[</span><span class="n">url</span> <span class="n">schema</span><span class="p">]</span> <span class="nl">isEqualToString:</span><span class="s">@&quot;tel&quot;</span><span class="p">]){</span>
</span><span class='line'>      <span class="p">[[</span><span class="n">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="nl">openURL:</span><span class="n">url</span><span class="p">];</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>参考资料：</h3>

<p>URL Schema 在浏览器中的兼容性：<a href="http://answers.oreilly.com/topic/2166-how-to-send-a-text-message-from-your-mobile-website/">How to Send a Text Message from Your Mobile Website</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 HTML5 应用缓存加速移动页面]]></title>
    <link href="http://beginios.com/blog/2014/01/14/using-the-application-cache/"/>
    <updated>2014-01-14T16:18:00+00:00</updated>
    <id>http://beginios.com/blog/2014/01/14/using-the-application-cache</id>
    <content type="html"><![CDATA[<h3>简介</h3>

<p>HTML5 提供了一种应用缓存的机制，将 HTML/JS/CSS/图片等资源缓存在浏览器本地，便于 Web 应用可以在断网的情况下离线运行，达到类似于“脱机浏览”的效果。浏览器还提供了调用应用缓存的接口 window.applicationCache，来设定浏览器缓存的数据。</p>

<p>它带来的好处有：</p>

<ol>
<li>离线浏览：即使断网状态，网站仍然可以浏览，保证了基本的可用性（当然，某些必须连接远程服务器的功能例外）</li>
<li>应用加速：因为相关的文件被缓存到本地，没有网络延时和服务器处理时间，加载速度变快了</li>
<li>减轻服务器的负载：浏览器只会下载服务器上发生变更的资源</li>
</ol>


<p>基本的做法是：</p>

<ol>
<li>页面在 &lt;html&gt; 声明使用一个 manifest 文件（后文会详细介绍），manifest 来维护需要缓存的资源文件（如：JS/CSS/图片等）列表。</li>
<li>初次访问页面的时候，浏览器在后台下载 manifest 中指定的资源文件，生成应用缓存的第一个版本。</li>
<li>后续访问的时候，就直接使用浏览器应用缓存里的资源了。同时浏览器会触发 applicationCache 对象的 checking 事件，去检查清单文件，如果缓存是最新的，再触发 noupdate 事件。</li>
<li>如果被缓存的文件发生了变更，我们需要服务器端马上更新 manifest 文件。</li>
<li>变更后首次访问的时候，浏览器仍然使用缓存文件来运行应用，同时自动在后台更新发生变化的资源文件。</li>
</ol>


<p>可以看到，它缓存的基本都是静态类型的文件。如果结合 SQLite 或者 localStorage 在本地进行一些数据缓存，完全可能搭建一个离线状态可正常运行的程序，剩下的就是考虑本地和远程服务器之间的资源文件及数据缓存如何更新问题。</p>

<p>利用这个机制，我们就可以在移动页面中实现网站加速，尤其是在 2G 这样的网络环境下，加速效果尤为明显。</p>

<!--more-->


<h3>浏览器兼容性</h3>

<p>这么高端大气上档次的功能，当然有其局限性――浏览器兼容。</p>

<p>目前 Web 端需要 Chrome4.0+/Firefox3.5+/IE10.0+/Opera10.6+/Safari4.0+，Mobile 端需要 Android2.1+/Opera Mobile11.0+/Safari3.2+</p>

<p>目前主流的 Web 端浏览器和移动设备浏览器均已经支持，对不支持的浏览器，仍然可以提供降级方案来处理。</p>

<h3>技术特点</h3>

<p>了解应用缓存的一些特点，有助于我们设计一套适合自身产品的整体解决方案。</p>

<ol>
<li>manifest 文件不能缓存，最起码得做 HTTP 304 校验。不然即使 manifest 文件变化了，浏览器也收不到变更通知。</li>
<li>只有在 manifest 文件中的文件，才会被缓存，并且不支持通配符，所有文件必须全路径列在其中</li>
<li>浏览器每次都会检查 manifest 是否有更新，如果有，就在后台更新文件</li>
<li>引用了 manifest 的页面，自动被加入到离线列表，即使 manifest 文件里没指定它。</li>
<li>缓存是全路径匹配，同一个文件始终是维持最新的，manifest 文件里即使写了两行，main.js?v=1 和 main.js?v=2 只会缓存一个</li>
<li>缓存文件如果加 GET 参数，就会穿透缓存。</li>
</ol>


<h3>整体解决方案</h3>

<p>利用 manifest 将所有静态资源缓存到浏览器，页面只引用一个种子 JS 文件，其他的 JS 文件都通过异步加载引入。监听 applicationCache 对象的 updateready 和 noupdate 事件，如果有更新，就强制带版本号穿透缓存访问线上的最新资源文件；如果没更新，就直接不带版本号访问本地缓存的文件。</p>

<p>存在一个不好处理的地方，就是 CSS 文件中的图片资源，如果不带版本号，始终访问的是本地的资源。因此最好 CSS 文件中的图片是带版本号的，manifest 里面也带上版本号；或者 CSS 有两个，一个用于缓存一个用于线上最新版浏览。</p>

<p>说了这么多，让我们实际做一个例子出来：</p>

<h3>开启应用缓存</h3>

<p>首先，通过给页面 &lt;html&gt; 增加 manifest 特性来开启这个功能。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">manifest=</span><span class="s">&quot;manifest.appcache&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  ...
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>有些浏览器，比如说firefox，当用户首次加载一个需要使用应用缓存的应用时，会显示一个提示栏。提示信息如下：</p>

<p>该站点 (www.example.com) 请求在你的电脑上存储数据以供离线使用。[允许] [对此站点永不允许] [暂时不允许]</p>

<p>缓存清单文件（manifest）理论上可以使用任意扩展名，但传输它的 MIME 类型必须为 text/cache-manifest。我这里，将它的文件扩展名指定为 .appcache。</p>

<p>因此，我们需要配置 HTTP 服务器，支持这种 MIME 类型。</p>

<h3>配置Apache/Nginx服务器</h3>

<p>在 Apache 服务器上，若要设置适用于清单(.appcache)文件的 MIME 类型，可以向根目录或应用的同级目录下的一个 .htaccess 文件中增加：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>AddType text/cache-manifest .appcache</span></code></pre></td></tr></table></div></figure>


<p>在 Nginx 服务器上，需要修改 /etc/nginx/mime.types （如果你的 Nginx 安装在别的位置，请在对应路径寻找），在最后增加一行：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>text/cache-manifest                     appcache;</span></code></pre></td></tr></table></div></figure>


<h3>缓存清单文件格式</h3>

<p>缓存清单文件是一个UTF-8 格式的纯文本文件，它列出了所有浏览器应该缓存起来的资源，以便能够离线访问。</p>

<p>缓存清单文件可以包含三段内容 (CACHE、NETWORK 和 FALLBACK)，一般我们都按照这个顺序书写。缓存清单文件的第一行必须包含字符串 CACHE MANIFEST。范例：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CACHE MANIFEST
</span><span class='line'># 2014-01-14 V0.1，版本号
</span><span class='line'># 井号后的代码都是注释
</span><span class='line'>
</span><span class='line'>CACHE:
</span><span class='line'>index.html
</span><span class='line'>main.js
</span><span class='line'>main.css
</span><span class='line'>some-picture.png
</span><span class='line'>
</span><span class='line'># Use from network if available
</span><span class='line'>NETWORK:
</span><span class='line'>*
</span><span class='line'>
</span><span class='line'># Fallback content
</span><span class='line'>FALLBACK:
</span><span class='line'>/ fallback.html</span></code></pre></td></tr></table></div></figure>


<p>在缓存清单文件中列出的所有记录必须拥有相同的协议、主机名与端口号，可以使用相对路径或者绝对路径</p>

<p>CACHE 模块指定需要被缓存的文件，每行一个是一个文件，不能使用通配符。在 CACHE: 段落标题后(或直接跟在 CACHE MANIFEST 行后)列出的文件会在它们第一次下载完毕后缓存起来。</p>

<p>NETWORK 指定的文件，是需要与服务器连接的白名单资源，必须从网络获取，可以使用通配符</p>

<p>FALLBACK 指定的页面，作为后备资源来提供，当资源无法访问的时候，浏览器使用该页面（例如，当无法与服务器建立连接时）。空格前面是资源，后面是后备的页面。这两个 URL 必须使用相对路径，并且与 manifest 文件同源，可以使用通配符。</p>

<p>可以包含空行；每个段落标识符后的半角冒号不可缺少。</p>

<h3>应用缓存接口 applicationCache</h3>

<p>//当前文档对应的applicationCache对象
window.applicationCache</p>

<p>//当前缓存所处的状态，为0～5的整数值，分别对应一个状态，并分别对应一个常量
window.applicationCache.status</p>

<p>缓存状态</p>

<p>每个应用缓存都有一个状态，标示着缓存的当前状况。共享同一清单 URI 的缓存拥有相同的缓存状态，可能是其中之一：</p>

<ol>
<li>UNCACHED(未缓存)一个特殊的值，用于表明一个应用缓存对象还没有完全初始化。</li>
<li>IDLE(空闲)应用缓存此时未处于更新过程中。</li>
<li>CHECKING(检查)清单已经获取完毕并检查更新。</li>
<li>DOWNLOADING(下载中)下载资源并准备加入到缓存中，这是由于清单变化引起的。</li>
<li>UPDATEREADY(更新就绪)一个新版本的应用缓存可以使用。有一个对应的事件 updateready，当下载完毕一个更新，并且还未使用 swapCache() 方法激活更新时，该事件触发，而不会是 cached 事件。</li>
<li>OBSOLETE(废弃)应用缓存现在被废弃。</li>
</ol>


<p>事件</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">handleCacheEvent</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">handleCacheError</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;Error: Cache failed to update!&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">appCache</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">applicationCache</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Checking for an update. Always the first event fired in the sequence.</span>
</span><span class='line'><span class="nx">appCache</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;checking&#39;</span><span class="p">,</span> <span class="nx">handleCacheEvent</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// An update was found. The browser is fetching resources.</span>
</span><span class='line'><span class="nx">appCache</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;downloading&#39;</span><span class="p">,</span> <span class="nx">handleCacheEvent</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// The manifest returns 404 or 410, the download failed,</span>
</span><span class='line'><span class="c1">// or the manifest changed while the download was in progress.</span>
</span><span class='line'><span class="nx">appCache</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="nx">handleCacheError</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Fired after the first download of the manifest.</span>
</span><span class='line'><span class="nx">appCache</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;noupdate&#39;</span><span class="p">,</span> <span class="nx">handleCacheEvent</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Fired if the manifest file returns a 404 or 410.</span>
</span><span class='line'><span class="c1">// This results in the application cache being deleted.</span>
</span><span class='line'><span class="nx">appCache</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;obsolete&#39;</span><span class="p">,</span> <span class="nx">handleCacheEvent</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Fired for each resource listed in the manifest as it is being fetched.</span>
</span><span class='line'><span class="nx">appCache</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;progress&#39;</span><span class="p">,</span> <span class="nx">handleCacheEvent</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Fired when the manifest resources have been newly redownloaded.</span>
</span><span class='line'><span class="nx">appCache</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;updateready&#39;</span><span class="p">,</span> <span class="nx">handleCacheEvent</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Fired after the first cache of the manifest.</span>
</span><span class='line'><span class="nx">appCache</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;cached&#39;</span><span class="p">,</span> <span class="nx">handleCacheEvent</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Javascript API</p>

<p>applicationCache.abort() 终止更新操作</p>

<p>applicationCache.swapCache() 可将原缓存换成新缓存</p>

<p>applicationCache.update() 页面会主动与服务器通信，检查页面当前的缓存是否为最新的，如不是，则下载更新后的资源</p>

<h3>降级方案</h3>

<p>对于不支持应用缓存机制的早期浏览器，或者个别手机浏览器，可以让禁用这个功能。</p>

<p>manifest 文件可以是动态的，例如 PHP，判断 userAgent，对不支持的浏览器，直接返回 404，让应用缓存功能失效。</p>

<p>对于不支持的浏览器，还走线上的版本号管理机制，每次加载的时候，都带着页面输出的版本号。</p>

<h3>应用缓存的存储和清理</h3>

<p>在 Chrome 中，你可以在设置中选择 「清除浏览器数据&hellip;」 或访问 chrome://appcache-internals/ 来清除缓存。Safari 在设置中有一个类似的&#8221;清空缓存&#8221; 选项，但是需要重启浏览器后才能生效。</p>

<p>在 Firefox 中，离线缓存数据与 Firefox 配置文件是分开存储的―紧挨着硬盘缓存：</p>

<p>Windows Vista/7: C:\Users&lt;username>\AppData\Local\Mozilla\Firefox\Profiles&lt;salt>.<profile name>\OfflineCache
Mac/Linux: /Users/<username>/Library/Caches/Firefox/Profiles/<salt>.<profile name>/OfflineCache
在 Firefox 中可以通过访问 about:cache 页面(在「离线缓存设置」标题下)来检查离线缓存的当前状况。 若想单独清除每个网站的离线缓存，可以使用 工具 &ndash;> 选项 &ndash;> 高级 &ndash;> 网络 &ndash;> 离线数据中的「删除」按钮。</p>

<p>在 Firefox 11 之前，无论是 工具 &ndash;> 清除近期历史 还是 工具 &ndash;> 选项 &ndash;> 高级 &ndash;> 网络 &ndash;> 离线数据 &ndash;> 立即清除 都无法清除离线缓存。这个问题已经被修复。</p>

<p>另请参阅 清除 DOM 存储数据。</p>

<p>应用缓存可以变成废弃的。如果从服务器上移除一个应用的清单文件，浏览器将会清除所有清单中列出的应用缓存，并向 applicationCache 对象发送一个「obsolete」事件。这将使得应用缓存的状态变为 OBSOLETE。</p>

<h3>陷阱</h3>

<p>永远不要使用传统 GET 参数(例如 other-cached-page.html?parameterName=value) 来访问缓存文件。这会使浏览器绕过缓存，直接从网络获取。若想链接一个参数需要在 JavaScript 中解析的资源，你可以将参数放到链接的 hash 部分，例如 other-cached-page.html#whatever?parameterName=value。</p>

<p>当应用被缓存后，仅仅更新在 web 页面中使用的资源(文件)还不足以更新被缓存的文件。你需要在浏览器获取和使用更新的文件前，去更新缓存清单文件本身。你可以使用 window.applicationCache.swapCache() 以编程的方式完成上述目的，虽然这无法影响到已经加载完毕的资源。为了保证资源从应用缓存的最新版本中加载，最理想的办法就是刷新页面。</p>

<p>通过在 web 服务器上设置 expires header 来使 *.appcache 文件立即过期是个好主意。这避免了将清单文件缓存的风险。例如，在 Apache 中，你可以指定下面的配置项：
ExpiresByType text/cache-manifest &ldquo;access plus 0 seconds&rdquo;</p>

<h3>总结</h3>

<ol>
<li>站点离线存储的容量限制是 5Mb</li>
<li>如果 manifest 文件，或者内部列举的某一个文件不能正常下载，整个更新过程将视为失败，浏览器继续全部使用老的缓存</li>
<li>引用 manifest 的 html 必须与 manifest 文件同源，在同一个域下</li>
<li>在 manifest 中使用的相对路径，相对参照物为 manifest 文件</li>
<li>CACHE MANIFEST 字符串应在第一行，且必不可少</li>
<li>系统会自动缓存引用清单文件的 HTML 文件</li>
<li>manifest 文件中 CACHE 与 NETWORK，FALLBACK 的位置顺序没有关系，如果是隐式声明需要在最前面</li>
<li>FALLBACK 中的资源必须和 manifest 文件同源</li>
<li>当一个资源被缓存后，该浏览器直接请求这个绝对路径也会访问缓存中的资源。</li>
<li>站点中的其他页面即使没有设置 manifest 属性，请求的资源如果在缓存中也从缓存中访问</li>
<li>当 manifest 文件发生改变时，资源请求本身也会触发更新</li>
<li>不要在清单文件中指定清单文件本身，否则将无法让浏览器得知清单文件有新版本出现</li>
</ol>


<h3>参考资料：</h3>

<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/HTML/Using_the_application_cache">使用应用缓存</a></li>
<li><a href="http://www.html5rocks.com/zh/tutorials/appcache/beginner/">应用缓存初级使用指南</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OS X 下抓包工具 Charles 使用]]></title>
    <link href="http://beginios.com/blog/2014/01/14/charles-proxy-for-mac/"/>
    <updated>2014-01-14T02:43:00+00:00</updated>
    <id>http://beginios.com/blog/2014/01/14/charles-proxy-for-mac</id>
    <content type="html"><![CDATA[<p>对于经常在 Windows 下进行 Web 开发的人来说，<a href="http://www.fiddler2.com/">Fiddler</a> 是神器。但由于它是 .Net Framework 下开发的，注定了用于 Linux 或者 Unix 之类系统上只能通过反向代理，如果不在同一个局域网内，非常麻烦。</p>

<p>还好在 Mac OS X 下我们还有 <a href="http:///www.charlesproxy.com/">Charles</a>。</p>

<p>和 Fiddler 相比较，二者的功能不相伯仲。优势在于 Charles 跨平台能力强，Charles 支持 Windows/Mac OS/Linux，Fiddler 只能安装在 Windows 下；劣势在于 Charles 是商业软件，最便宜也得 50 美金。</p>

<p>当然，网上已经有很多破解版，感兴趣的网友请自己搜索。</p>

<p>一些使用技巧如下：</p>

<h3>记录设置</h3>

<p>主菜单 Proxy->Recording Settings&hellip;</p>

<p>Include 填写必须要记录的域名，可以使用通配符 * 和 ?，如： *.beginios.com</p>

<p>Exclude 填写不需要记录的域名，可以使用通配符 * 和 ?</p>

<p>注：如果不设置此项，表示全部记录</p>

<h3>禁用缓存</h3>

<p>主菜单 Tools->No Caching&hellip;</p>

<p>勾选后，每次都从服务器读取</p>

<h3>iOS 设备 HTTP 抓包</h3>

<ol>
<li>确保 iOS 设备和 Mac 电脑在同一个局域网内，启动 Charles</li>
<li>打开 Proxy->Proxy Settings&hellip;，勾选 Enable transparent HTTP proxying</li>
<li>查看 Mac 电脑的 IP 地址，如：192.168.1.100</li>
<li>打开 iOS 设备的设置，进入当前 Wifi 连接，设置 HTTP 代理切换到“手动”，将服务器填为上一步中获得的 IP，端口填8888</li>
<li>iOS 设备中，打开你要抓包的应用进行网络操作</li>
<li>Charles 弹出确认框，点击 Allow 按钮即可</li>
</ol>


<h3>HTTPS抓包</h3>

<ol>
<li>下载 <a href="http://www.charlesproxy.com/ssl.zip">Charles 证书</a>，解压后导入到 iOS 设备中（将 crt 文件作为邮件附件发给自己，再在 iOS 设备中点击附件即可安装；也可上传至 dropbox 之类的网盘，通过 safari 下载安装）</li>
<li>在Charles的工具栏上点击设置按钮，选择 Proxy Settings…</li>
<li>切换到 SSL 选项卡，选中 Enable SSL Proxying，然后在 Locations 表单填写要抓包的域名和端口，点击Add按钮，在弹出的表单中 Host 填写域名，比如填 api.weibo.com，Port 填 443</li>
</ol>


<h3>替换本地文件</h3>

<p>Tools &ndash;> Map Local&hellip;</p>

<h3>网络延迟功能</h3>

<p>主菜单  Proxy->Throttle Settings&hellip;</p>

<p>可以用于测试慢速网络下程序的兼容性</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[序]]></title>
    <link href="http://beginios.com/blog/2014/01/10/preface/"/>
    <updated>2014-01-10T01:59:00+00:00</updated>
    <id>http://beginios.com/blog/2014/01/10/preface</id>
    <content type="html"><![CDATA[

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[[[</span><span class="n">FrontEndEnginer</span> <span class="n">alloc</span><span class="p">]</span><span class="nl">initWithName:</span><span class="s">@&quot;Bencalie&quot;</span><span class="p">]</span><span class="n">sayHelloToEverybody</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>欢迎大家光临，我是一名 iOS 初学者，入门之路坎坎坷坷，此博客用于记录我的一些学习笔记。</p>

<p>我的工作是前端开发(偏 JavaScript 方向)，学习移动开发也是工作和个人兴趣使然。本来是想把前端开发和 iOS 开发的博客分开，因精力有限，就都放一起了。因此，大家在博客中见到一些关于前端开发方向的博文，也不要奇怪。</p>

<p>我目前主攻的方向是 iOS 开发和 Cocos2d-x 游戏开发，欢迎有共同爱好者一起学习探讨。</p>
]]></content>
  </entry>
  
</feed>
