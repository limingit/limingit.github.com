<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Begin iOS]]></title>
  <link href="http://limingit.github.io/atom.xml" rel="self"/>
  <link href="http://limingit.github.io/"/>
  <updated>2014-01-15T07:21:25+00:00</updated>
  <id>http://limingit.github.io/</id>
  <author>
    <name><![CDATA[Bencalie]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用 HTML5 应用缓存加速移动页面]]></title>
    <link href="http://limingit.github.io/blog/2014/01/14/using-the-application-cache/"/>
    <updated>2014-01-14T16:18:00+00:00</updated>
    <id>http://limingit.github.io/blog/2014/01/14/using-the-application-cache</id>
    <content type="html"><![CDATA[<h3>简介</h3>

<p>HTML5 提供了一种应用缓存的机制，将 HTML/JS/CSS/图片等资源缓存在浏览器本地，便于 Web 应用可以在断网的情况下离线运行，达到类似于“脱机浏览”的效果。浏览器还提供了调用应用缓存的接口 window.applicationCache，来设定浏览器缓存的数据。</p>

<p>它带来的好处有：</p>

<ol>
<li>离线浏览：即使断网状态，网站仍然可以浏览，保证了基本的可用性（当然，某些必须连接远程服务器的功能例外）</li>
<li>应用加速：因为相关的文件被缓存到本地，没有网络延时和服务器处理时间，加载速度变快了</li>
<li>减轻服务器的负载：浏览器只会下载服务器上发生变更的资源</li>
</ol>


<p>基本的做法是：</p>

<ol>
<li>页面在 &lt;html&gt; 声明使用一个 manifest 文件（后文会详细介绍），manifest 来维护需要缓存的资源文件（如：JS/CSS/图片等）列表。</li>
<li>初次访问页面的时候，浏览器在后台下载 manifest 中指定的资源文件，生成应用缓存的第一个版本。</li>
<li>后续访问的时候，就直接使用浏览器应用缓存里的资源了。同时浏览器会触发 applicationCache 对象的 checking 事件，去检查清单文件，如果缓存是最新的，再触发 noupdate 事件。</li>
<li>如果被缓存的文件发生了变更，我们需要服务器端马上更新 manifest 文件。</li>
<li>变更后首次访问的时候，浏览器仍然使用缓存文件来运行应用，同时自动在后台更新发生变化的资源文件。</li>
</ol>


<p>可以看到，它缓存的基本都是静态类型的文件。如果结合 SQLite 或者 localStorage 在本地进行一些数据缓存，完全可能搭建一个离线状态可正常运行的程序，剩下的就是考虑本地和远程服务器之间的资源文件及数据缓存如何更新问题。</p>

<p>利用这个机制，我们就可以在移动页面中实现网站加速，尤其是在 2G 这样的网络环境下，加速效果尤为明显。</p>

<h3>浏览器兼容性</h3>

<p>这么高端大气上档次的功能，当然有其局限性――浏览器兼容。</p>

<p>目前 Web 端需要 Chrome4.0+/Firefox3.5+/IE10.0+/Opera10.6+/Safari4.0+，Mobile 端需要 Android2.1+/Opera Mobile11.0+/Safari3.2+</p>

<p>目前主流的 Web 端浏览器和移动设备浏览器均已经支持，对不支持的浏览器，仍然可以提供降级方案来处理。</p>

<h3>技术特点</h3>

<p>了解应用缓存的一些特点，有助于我们设计一套适合自身产品的整体解决方案。</p>

<ol>
<li>manifest 文件不能缓存，最起码得做 HTTP 304 校验。不然即使 manifest 文件变化了，浏览器也收不到变更通知。</li>
<li>只有在 manifest 文件中的文件，才会被缓存，并且不支持通配符，所有文件必须全路径列在其中</li>
<li>浏览器每次都会检查 manifest 是否有更新，如果有，就在后台更新文件</li>
<li>引用了 manifest 的页面，自动被加入到离线列表，即使 manifest 文件里没指定它。</li>
<li>缓存是全路径匹配，同一个文件始终是维持最新的，manifest 文件里即使写了两行，main.js?v=1 和 main.js?v=2 只会缓存一个</li>
<li>缓存文件如果加 GET 参数，就会穿透缓存。</li>
</ol>


<h3>整体解决方案</h3>

<p>利用 manifest 将所有静态资源缓存到浏览器，页面只引用一个种子 JS 文件，其他的 JS 文件都通过异步加载引入。监听 applicationCache 对象的 updateready 和 noupdate 事件，如果有更新，就强制带版本号穿透缓存访问线上的最新资源文件；如果没更新，就直接不带版本号访问本地缓存的文件。</p>

<p>存在一个不好处理的地方，就是 CSS 文件中的图片资源，如果不带版本号，始终访问的是本地的资源。因此最好 CSS 文件中的图片是带版本号的，manifest 里面也带上版本号；或者 CSS 有两个，一个用于缓存一个用于线上最新版浏览。</p>

<p>说了这么多，让我们实际做一个例子出来：</p>

<h3>开启应用缓存</h3>

<p>首先，通过给页面 &lt;html&gt; 增加 manifest 特性来开启这个功能（）</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">manifest=</span><span class="s">&quot;manifest.appcache&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  ...
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>有些浏览器，比如说firefox，当用户首次加载一个需要使用应用缓存的应用时，会显示一个提示栏。提示信息如下：
该站点 (www.example.com) 请求在你的电脑上存储数据以供离线使用。[允许] [对此站点永不允许] [暂时不允许]</p>

<p>缓存清单文件（manifest）理论上可以使用任意扩展名，但传输它的 MIME 类型必须为 text/cache-manifest。我这里，将它的文件扩展名指定为 .appcache。</p>

<p>因此，我们需要配置 HTTP 服务器，支持这种 MIME 类型。</p>

<h3>配置Apache/Nginx服务器</h3>

<p>在 Apache 服务器上，若要设置适用于清单(.appcache)文件的 MIME 类型，可以向根目录或应用的同级目录下的一个 .htaccess 文件中增加：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>AddType text/cache-manifest .appcache</span></code></pre></td></tr></table></div></figure>


<p>在 Nginx 服务器上，需要修改 /etc/nginx/mime.types （如果你的 Nginx 安装在别的位置，请在对应路径寻找），在最后增加一行：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>text/cache-manifest                     appcache;</span></code></pre></td></tr></table></div></figure>


<h3>缓存清单文件格式</h3>

<p>缓存清单文件是一个UTF-8 格式的纯文本文件，它列出了所有浏览器应该缓存起来的资源，以便能够离线访问。</p>

<p>缓存清单文件可以包含三段内容 (CACHE、NETWORK 和 FALLBACK)，一般我们都按照这个顺序书写。缓存清单文件的第一行必须包含字符串 CACHE MANIFEST。范例：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CACHE MANIFEST
</span><span class='line'># 2014-01-14 V0.1，版本号
</span><span class='line'># 井号后的代码都是注释
</span><span class='line'>
</span><span class='line'>CACHE:
</span><span class='line'>index.html
</span><span class='line'>main.js
</span><span class='line'>main.css
</span><span class='line'>some-picture.png
</span><span class='line'>
</span><span class='line'># Use from network if available
</span><span class='line'>NETWORK:
</span><span class='line'>*
</span><span class='line'>
</span><span class='line'># Fallback content
</span><span class='line'>FALLBACK:
</span><span class='line'>/ fallback.html</span></code></pre></td></tr></table></div></figure>


<p>在缓存清单文件中列出的所有记录必须拥有相同的协议、主机名与端口号，可以使用相对路径或者绝对路径</p>

<p>CACHE 模块指定需要被缓存的文件，每行一个是一个文件，不能使用通配符。在 CACHE: 段落标题后(或直接跟在 CACHE MANIFEST 行后)列出的文件会在它们第一次下载完毕后缓存起来。</p>

<p>NETWORK 指定的文件，是需要与服务器连接的白名单资源，必须从网络获取，可以使用通配符</p>

<p>FALLBACK 指定的页面，作为后备资源来提供，当资源无法访问的时候，浏览器使用该页面（例如，当无法与服务器建立连接时）。空格前面是资源，后面是后备的页面。这两个 URL 必须使用相对路径，并且与 manifest 文件同源，可以使用通配符。</p>

<p>可以包含空行；每个段落标识符后的半角冒号不可缺少。</p>

<h3>应用缓存接口 applicationCache</h3>

<p>缓存状态</p>

<p>每个应用缓存都有一个状态，标示着缓存的当前状况。共享同一清单 URI 的缓存拥有相同的缓存状态，可能是其中之一：</p>

<ol>
<li>UNCACHED(未缓存)一个特殊的值，用于表明一个应用缓存对象还没有完全初始化。</li>
<li>IDLE(空闲)应用缓存此时未处于更新过程中。</li>
<li>CHECKING(检查)清单已经获取完毕并检查更新。</li>
<li>DOWNLOADING(下载中)下载资源并准备加入到缓存中，这是由于清单变化引起的。</li>
<li>UPDATEREADY(更新就绪)一个新版本的应用缓存可以使用。有一个对应的事件 updateready，当下载完毕一个更新，并且还未使用 swapCache() 方法激活更新时，该事件触发，而不会是 cached 事件。</li>
<li>OBSOLETE(废弃)应用缓存现在被废弃。</li>
</ol>


<p>事件</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">handleCacheEvent</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">handleCacheError</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;Error: Cache failed to update!&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">appCache</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">applicationCache</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Fired after the first cache of the manifest.</span>
</span><span class='line'><span class="nx">appCache</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;cached&#39;</span><span class="p">,</span> <span class="nx">handleCacheEvent</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Checking for an update. Always the first event fired in the sequence.</span>
</span><span class='line'><span class="nx">appCache</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;checking&#39;</span><span class="p">,</span> <span class="nx">handleCacheEvent</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// An update was found. The browser is fetching resources.</span>
</span><span class='line'><span class="nx">appCache</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;downloading&#39;</span><span class="p">,</span> <span class="nx">handleCacheEvent</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// The manifest returns 404 or 410, the download failed,</span>
</span><span class='line'><span class="c1">// or the manifest changed while the download was in progress.</span>
</span><span class='line'><span class="nx">appCache</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="nx">handleCacheError</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Fired after the first download of the manifest.</span>
</span><span class='line'><span class="nx">appCache</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;noupdate&#39;</span><span class="p">,</span> <span class="nx">handleCacheEvent</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Fired if the manifest file returns a 404 or 410.</span>
</span><span class='line'><span class="c1">// This results in the application cache being deleted.</span>
</span><span class='line'><span class="nx">appCache</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;obsolete&#39;</span><span class="p">,</span> <span class="nx">handleCacheEvent</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Fired for each resource listed in the manifest as it is being fetched.</span>
</span><span class='line'><span class="nx">appCache</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;progress&#39;</span><span class="p">,</span> <span class="nx">handleCacheEvent</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Fired when the manifest resources have been newly redownloaded.</span>
</span><span class='line'><span class="nx">appCache</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;updateready&#39;</span><span class="p">,</span> <span class="nx">handleCacheEvent</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>应用缓存的存储和清理</h3>

<p>在 Chrome 中，你可以在设置中选择 「清除浏览器数据&hellip;」 或访问 chrome://appcache-internals/ 来清除缓存。Safari 在设置中有一个类似的&#8221;清空缓存&#8221; 选项，但是需要重启浏览器后才能生效。</p>

<p>在 Firefox 中，离线缓存数据与 Firefox 配置文件是分开存储的―紧挨着硬盘缓存：</p>

<p>Windows Vista/7: C:\Users&lt;username>\AppData\Local\Mozilla\Firefox\Profiles&lt;salt>.<profile name>\OfflineCache
Mac/Linux: /Users/<username>/Library/Caches/Firefox/Profiles/<salt>.<profile name>/OfflineCache
在 Firefox 中可以通过访问 about:cache 页面(在「离线缓存设置」标题下)来检查离线缓存的当前状况。 若想单独清除每个网站的离线缓存，可以使用 工具 &ndash;> 选项 &ndash;> 高级 &ndash;> 网络 &ndash;> 离线数据中的「删除」按钮。</p>

<p>在 Firefox 11 之前，无论是 工具 &ndash;> 清除近期历史 还是 工具 &ndash;> 选项 &ndash;> 高级 &ndash;> 网络 &ndash;> 离线数据 &ndash;> 立即清除 都无法清除离线缓存。这个问题已经被修复。</p>

<p>另请参阅 清除 DOM 存储数据。</p>

<p>应用缓存可以变成废弃的。如果从服务器上移除一个应用的清单文件，浏览器将会清除所有清单中列出的应用缓存，并向 applicationCache 对象发送一个「obsolete」事件。这将使得应用缓存的状态变为 OBSOLETE。</p>

<h3>陷阱</h3>

<p>永远不要使用传统 GET 参数(例如 other-cached-page.html?parameterName=value) 来访问缓存文件。这会使浏览器绕过缓存，直接从网络获取。若想链接一个参数需要在 JavaScript 中解析的资源，你可以将参数放到链接的 hash 部分，例如 other-cached-page.html#whatever?parameterName=value。</p>

<p>当应用被缓存后，仅仅更新在 web 页面中使用的资源(文件)还不足以更新被缓存的文件。你需要在浏览器获取和使用更新的文件前，去更新缓存清单文件本身。你可以使用 window.applicationCache.swapCache() 以编程的方式完成上述目的，虽然这无法影响到已经加载完毕的资源。为了保证资源从应用缓存的最新版本中加载，最理想的办法就是刷新页面。</p>

<p>通过在 web 服务器上设置 expires header 来使 *.appcache 文件立即过期是个好主意。这避免了将清单文件缓存的风险。例如，在 Apache 中，你可以指定下面的配置项：
ExpiresByType text/cache-manifest &ldquo;access plus 0 seconds&rdquo;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OS 下抓包工具 Charles 使用]]></title>
    <link href="http://limingit.github.io/blog/2014/01/14/charles-proxy-for-mac/"/>
    <updated>2014-01-14T02:43:00+00:00</updated>
    <id>http://limingit.github.io/blog/2014/01/14/charles-proxy-for-mac</id>
    <content type="html"><![CDATA[<p>对于经常在 Windows 下进行 Web 开发的人来说，<a href="http://www.fiddler2.com/">Fiddler</a> 是神器。但由于它是 .Net Framework 下开发的，注定了用于 Linux 或者 Unix 之类系统上只能通过反向代理，如果不在同一个局域网内，非常麻烦。</p>

<p>还好在 Mac OSX 下我们还有 <a href="http:///www.charlesproxy.com/">Charles</a>。</p>

<p>和 Fiddler 相比较，二者的功能不相伯仲。优势在于 Charles 跨平台能力强，Charles 支持 Windows/Mac OS/Linux，Fiddler 只能安装在 Windows 下；劣势在于 Charles 是商业软件，最便宜也得 50 美金。</p>

<p>当然，网上已经有很多破解版，感兴趣的网友请自己搜索。</p>

<p>一些使用技巧如下：</p>

<h3>记录设置</h3>

<p>主菜单 Proxy->Recording Settings&hellip;</p>

<p>Include 填写必须要记录的域名，可以使用通配符 * 和 ?，如： *.beginios.com</p>

<p>Exclude 填写不需要记录的域名，可以使用通配符 * 和 ?</p>

<p>注：如果不设置此项，表示全部记录</p>

<h3>禁用缓存</h3>

<p>主菜单 Tools->No Caching&hellip;</p>

<p>勾选后，每次都从服务器读取</p>

<h3>iOS 设备 HTTP 抓包</h3>

<ol>
<li>确保 iOS 设备和 Mac 电脑在同一个局域网内，启动 Charles</li>
<li>打开 Proxy->Proxy Settings&hellip;，勾选 Enable transparent HTTP proxying</li>
<li>查看 Mac 电脑的 IP 地址，如：192.168.1.100</li>
<li>打开 iOS 设备的设置，进入当前 Wifi 连接，设置 HTTP 代理切换到“手动”，将服务器填为上一步中获得的 IP，端口填8888</li>
<li>iOS 设备中，打开你要抓包的应用进行网络操作</li>
<li>Charles 弹出确认框，点击 Allow 按钮即可</li>
</ol>


<h3>HTTPS抓包</h3>

<ol>
<li>下载 <a href="http://www.charlesproxy.com/ssl.zip">Charles 证书</a>，解压后导入到 iOS 设备中（将 crt 文件作为邮件附件发给自己，再在 iOS 设备中点击附件即可安装；也可上传至 dropbox 之类的网盘，通过 safari 下载安装）</li>
<li>在Charles的工具栏上点击设置按钮，选择 Proxy Settings…</li>
<li>切换到 SSL 选项卡，选中 Enable SSL Proxying，然后在 Locations 表单填写要抓包的域名和端口，点击Add按钮，在弹出的表单中 Host 填写域名，比如填 api.weibo.com，Port 填 443</li>
</ol>


<h3>替换本地文件</h3>

<p>Tools &ndash;> Map Local&hellip;</p>

<h3>网络延迟功能</h3>

<p>主菜单  Proxy->Throttle Settings&hellip;</p>

<p>可以用于测试慢速网络下程序的兼容性</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[序]]></title>
    <link href="http://limingit.github.io/blog/2014/01/10/preface/"/>
    <updated>2014-01-10T01:59:00+00:00</updated>
    <id>http://limingit.github.io/blog/2014/01/10/preface</id>
    <content type="html"><![CDATA[

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[[[</span><span class="n">FrontEndEnginer</span> <span class="n">alloc</span><span class="p">]</span><span class="nl">initWithName:</span><span class="s">@&quot;Bencalie&quot;</span><span class="p">]</span><span class="n">sayHelloToEverybody</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>欢迎大家光临，我是一名 iOS 初学者，入门之路坎坎坷坷，此博客用于记录我的一些学习笔记。</p>

<p>我的工作是前端开发(偏 JavaScript 方向)，学习移动开发也是工作和个人兴趣使然。本来是想把前端开发和 iOS 开发的博客分开，因精力有限，就都放一起了。因此，大家在博客中见到一些关于前端开发方向的博文，也不要奇怪。</p>

<p>我目前主攻的方向是 iOS 开发和 Cocos2d-x 游戏开发，欢迎有共同爱好者一起学习探讨。</p>
]]></content>
  </entry>
  
</feed>
