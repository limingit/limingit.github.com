<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: HTML5 | Begin iOS]]></title>
  <link href="http://limingit.github.io/tags/html5/atom.xml" rel="self"/>
  <link href="http://limingit.github.io/"/>
  <updated>2014-01-15T06:35:58+00:00</updated>
  <id>http://limingit.github.io/</id>
  <author>
    <name><![CDATA[Bencalie]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用 HTML5 应用缓存加速移动页面]]></title>
    <link href="http://limingit.github.io/blog/2014/01/14/using-the-application-cache/"/>
    <updated>2014-01-14T16:18:00+00:00</updated>
    <id>http://limingit.github.io/blog/2014/01/14/using-the-application-cache</id>
    <content type="html"><![CDATA[<h3>简介</h3>

<p>HTML5 提供了一种应用缓存的机制，将 HTML/JS/CSS/图片等资源缓存在浏览器本地，便于 Web 应用可以在断网的情况下离线运行，达到类似于“脱机浏览”的效果。浏览器还提供了调用应用缓存的接口 window.applicationCache，来设定浏览器缓存的数据。</p>

<p>它带来的好处有：</p>

<ol>
<li>离线浏览：即使断网状态，网站仍然可以浏览，保证了基本的可用性（当然，某些必须连接远程服务器的功能例外）</li>
<li>应用加速：因为相关的文件被缓存到本地，没有网络延时和服务器处理时间，加载速度变快了</li>
<li>减轻服务器的负载：浏览器只会下载服务器上发生变更的资源</li>
</ol>


<p>基本的做法是：</p>

<ol>
<li>页面在 &lt;html&gt; 声明使用一个 manifest 文件（后文会详细介绍），manifest 来维护需要缓存的资源文件（如：JS/CSS/图片等）列表。</li>
<li>初次访问页面的时候，浏览器在后台下载 manifest 中指定的资源文件。当再次访问这些资源文件，就直接使用浏览器缓存了。</li>
<li>被缓存的文件发生变更后，我们需要服务器端马上更新 manifest 文件。</li>
<li>变更后首次访问的时候，浏览器仍然使用缓存文件来运行应用，同时自动在后台更新发生变化的资源文件。</li>
</ol>


<p>可以看到，它缓存的基本都是静态类型的文件。如果结合 SQLite 或者 localStorage 在本地进行一些数据缓存，完全可能搭建一个离线状态可正常运行的程序，剩下的就是考虑本地和远程服务器之间的资源文件及数据缓存如何更新问题。</p>

<p>利用这个机制，我们就可以在移动页面中实现网站加速，尤其是在 2G 这样的网络环境下，加速效果尤为明显。</p>

<h3>浏览器兼容性</h3>

<p>这么高端大气上档次的功能，当然有其局限性――浏览器兼容。</p>

<p>目前 Web 端需要 Chrome4.0+/Firefox3.5+/IE10.0+/Opera10.6+/Safari4.0+，Mobile 端需要 Android2.1+/Opera Mobile11.0+/Safari3.2+</p>

<p>目前主流的 Web 端浏览器和移动设备浏览器均已经支持，对不支持的浏览器，仍然可以提供降级方案来处理。</p>

<h3>技术特点</h3>

<p>了解应用缓存的一些特点，有助于我们设计一套适合自身产品的整体解决方案。</p>

<ol>
<li>manifest 文件不能缓存，最起码得做 HTTP 304 校验。不然即使 manifest 文件变化了，浏览器也收不到变更通知。</li>
<li>只有在 manifest 文件中的文件，才会被缓存，并且不支持通配符，所有文件必须全路径列在其中</li>
<li>浏览器每次都会检查 manifest 是否有更新，如果有，就在后台更新文件</li>
<li>引用了 manifest 的页面，自动被加入到离线列表，即使 manifest 文件里没指定它。</li>
<li>缓存是全路径匹配，同一个文件始终是维持最新的，manifest 文件里即使写了两行，main.js?v=1 和 main.js?v=2 只会缓存一个</li>
<li>缓存文件如果加 GET 参数，就会穿透缓存。</li>
</ol>


<h3>整体解决方案</h3>

<p>利用 manifest 将所有静态资源缓存到浏览器，页面只引用一个种子 JS 文件，其他的 JS 文件都通过异步加载引入。监听 applicationCache 对象的 updateready 和 noupdate 事件，如果有更新，就强制带版本号穿透缓存访问线上的最新资源文件；如果没更新，就直接不带版本号访问本地缓存的文件。</p>

<p>存在一个不好处理的地方，就是 CSS 文件中的图片资源，如果不带版本号，始终访问的是本地的资源。因此最好 CSS 文件中的图片是带版本号的，manifest 里面也带上版本号；或者 CSS 有两个，一个用于缓存一个用于线上最新版浏览。</p>

<p>说了这么多，让我们实际做一个例子出来：</p>

<h3>开启应用缓存</h3>

<p>首先，通过给页面 &lt;html&gt; 增加 manifest 特性来开启这个功能
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="ni">&amp;lt;</span>!DOCTYPE html&gt;
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">manifest=</span><span class="s">&quot;manifest.appcache&quot;</span><span class="nt">&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>...
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>manifest</h3>

<p>缓存清单文件（manifest）理论上可以使用任意扩展名，但传输它的 MIME 类型必须为 text/cache-manifest。</p>

<p>我这里，将它的文件扩展名指定为 .appcache</p>

<h3>配置Apache/Nginx</h3>

<p>在 Apache 服务器上，若要设置适用于清单(.appcache)文件的 MIME 类型，可以向根目录或应用的同级目录下的一个 .htaccess 文件中增加：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>AddType text/cache-manifest .appcache</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>在 Nginx 服务器上，需要修改 /etc/nginx/mime.types （如果你的 Nginx 安装在别的位置，请在对应路径寻找），在最后增加一行：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>text/cache-manifest                     appcache;</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>开启应用缓存</h3>

<h3>加载文档与更新应用缓存的流程</h3>

<h3>应用缓存的存储和清理</h3>

<p>在 Chrome 中，你可以在设置中选择 「清除浏览器数据&hellip;」 或访问 chrome://appcache-internals/ 来清除缓存。Safari 在设置中有一个类似的"清空缓存" 选项，但是需要重启浏览器后才能生效。</p>

<p>在 Firefox 中，离线缓存数据与 Firefox 配置文件是分开存储的―紧挨着硬盘缓存：</p>

<p>Windows Vista/7: C:\Users&lt;username>\AppData\Local\Mozilla\Firefox\Profiles&lt;salt>.<profile name>\OfflineCache
Mac/Linux: /Users/<username>/Library/Caches/Firefox/Profiles/<salt>.<profile name>/OfflineCache
在 Firefox 中可以通过访问 about:cache 页面(在「离线缓存设置」标题下)来检查离线缓存的当前状况。 若想单独清除每个网站的离线缓存，可以使用 工具 &ndash;> 选项 &ndash;> 高级 &ndash;> 网络 &ndash;> 离线数据中的「删除」按钮。</p>

<p>在 Firefox 11 之前，无论是 工具 &ndash;> 清除近期历史 还是 工具 &ndash;> 选项 &ndash;> 高级 &ndash;> 网络 &ndash;> 离线数据 &ndash;> 立即清除 都无法清除离线缓存。这个问题已经被修复。</p>

<p>另请参阅 清除 DOM 存储数据。</p>

<p>应用缓存可以变成废弃的。如果从服务器上移除一个应用的清单文件，浏览器将会清除所有清单中列出的应用缓存，并向 applicationCache 对象发送一个「obsolete」事件。这将使得应用缓存的状态变为 OBSOLETE。</p>

<h3>缓存清单文件（manifest）</h3>

<h3>应用缓存接口</h3>

<p>缓存状态</p>

<p>事件</p>

<h3>陷阱</h3>

<p>永远不要使用传统 GET 参数(例如 other-cached-page.html?parameterName=value) 来访问缓存文件。这会使浏览器绕过缓存，直接从网络获取。若想链接一个参数需要在 JavaScript 中解析的资源，你可以将参数放到链接的 hash 部分，例如 other-cached-page.html#whatever?parameterName=value。</p>

<p>当应用被缓存后，仅仅更新在 web 页面中使用的资源(文件)还不足以更新被缓存的文件。你需要在浏览器获取和使用更新的文件前，去更新缓存清单文件本身。你可以使用 window.applicationCache.swapCache() 以编程的方式完成上述目的，虽然这无法影响到已经加载完毕的资源。为了保证资源从应用缓存的最新版本中加载，最理想的办法就是刷新页面。</p>

<p>通过在 web 服务器上设置 expires header 来使 *.appcache 文件立即过期是个好主意。这避免了将清单文件缓存的风险。例如，在 Apache 中，你可以指定下面的配置项：
ExpiresByType text/cache-manifest &ldquo;access plus 0 seconds&rdquo;</p>
]]></content>
  </entry>
  
</feed>
